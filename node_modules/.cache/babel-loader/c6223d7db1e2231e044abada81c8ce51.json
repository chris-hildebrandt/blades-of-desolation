{"ast":null,"code":"import * as dom from './index.js';\nimport { swalClasses } from '../classes.js';\nimport { getDirectChildByClass } from './domUtils.js';\nimport { asPromise, error, hasToPromiseFn, isPromise } from '../utils.js';\nimport { showLoading } from '../../staticMethods/showLoading.js';\nexport const handleInputOptionsAndValue = (instance, params) => {\n  if (params.input === 'select' || params.input === 'radio') {\n    handleInputOptions(instance, params);\n  } else if (['text', 'email', 'number', 'tel', 'textarea'].includes(params.input) && (hasToPromiseFn(params.inputValue) || isPromise(params.inputValue))) {\n    showLoading(dom.getConfirmButton());\n    handleInputValue(instance, params);\n  }\n};\nexport const getInputValue = (instance, innerParams) => {\n  const input = instance.getInput();\n\n  if (!input) {\n    return null;\n  }\n\n  switch (innerParams.input) {\n    case 'checkbox':\n      return getCheckboxValue(input);\n\n    case 'radio':\n      return getRadioValue(input);\n\n    case 'file':\n      return getFileValue(input);\n\n    default:\n      return innerParams.inputAutoTrim ? input.value.trim() : input.value;\n  }\n};\n\nconst getCheckboxValue = input => input.checked ? 1 : 0;\n\nconst getRadioValue = input => input.checked ? input.value : null;\n\nconst getFileValue = input => input.files.length ? input.getAttribute('multiple') !== null ? input.files : input.files[0] : null;\n\nconst handleInputOptions = (instance, params) => {\n  const popup = dom.getPopup();\n\n  const processInputOptions = inputOptions => populateInputOptions[params.input](popup, formatInputOptions(inputOptions), params);\n\n  if (hasToPromiseFn(params.inputOptions) || isPromise(params.inputOptions)) {\n    showLoading(dom.getConfirmButton());\n    asPromise(params.inputOptions).then(inputOptions => {\n      instance.hideLoading();\n      processInputOptions(inputOptions);\n    });\n  } else if (typeof params.inputOptions === 'object') {\n    processInputOptions(params.inputOptions);\n  } else {\n    error(`Unexpected type of inputOptions! Expected object, Map or Promise, got ${typeof params.inputOptions}`);\n  }\n};\n\nconst handleInputValue = (instance, params) => {\n  const input = instance.getInput();\n  dom.hide(input);\n  asPromise(params.inputValue).then(inputValue => {\n    input.value = params.input === 'number' ? parseFloat(inputValue) || 0 : `${inputValue}`;\n    dom.show(input);\n    input.focus();\n    instance.hideLoading();\n  }).catch(err => {\n    error(`Error in inputValue promise: ${err}`);\n    input.value = '';\n    dom.show(input);\n    input.focus();\n    instance.hideLoading();\n  });\n};\n\nconst populateInputOptions = {\n  select: (popup, inputOptions, params) => {\n    const select = getDirectChildByClass(popup, swalClasses.select);\n\n    const renderOption = (parent, optionLabel, optionValue) => {\n      const option = document.createElement('option');\n      option.value = optionValue;\n      dom.setInnerHtml(option, optionLabel);\n      option.selected = isSelected(optionValue, params.inputValue);\n      parent.appendChild(option);\n    };\n\n    inputOptions.forEach(inputOption => {\n      const optionValue = inputOption[0];\n      const optionLabel = inputOption[1]; // <optgroup> spec:\n      // https://www.w3.org/TR/html401/interact/forms.html#h-17.6\n      // \"...all OPTGROUP elements must be specified directly within a SELECT element (i.e., groups may not be nested)...\"\n      // check whether this is a <optgroup>\n\n      if (Array.isArray(optionLabel)) {\n        // if it is an array, then it is an <optgroup>\n        const optgroup = document.createElement('optgroup');\n        optgroup.label = optionValue;\n        optgroup.disabled = false; // not configurable for now\n\n        select.appendChild(optgroup);\n        optionLabel.forEach(o => renderOption(optgroup, o[1], o[0]));\n      } else {\n        // case of <option>\n        renderOption(select, optionLabel, optionValue);\n      }\n    });\n    select.focus();\n  },\n  radio: (popup, inputOptions, params) => {\n    const radio = getDirectChildByClass(popup, swalClasses.radio);\n    inputOptions.forEach(inputOption => {\n      const radioValue = inputOption[0];\n      const radioLabel = inputOption[1];\n      const radioInput = document.createElement('input');\n      const radioLabelElement = document.createElement('label');\n      radioInput.type = 'radio';\n      radioInput.name = swalClasses.radio;\n      radioInput.value = radioValue;\n\n      if (isSelected(radioValue, params.inputValue)) {\n        radioInput.checked = true;\n      }\n\n      const label = document.createElement('span');\n      dom.setInnerHtml(label, radioLabel);\n      label.className = swalClasses.label;\n      radioLabelElement.appendChild(radioInput);\n      radioLabelElement.appendChild(label);\n      radio.appendChild(radioLabelElement);\n    });\n    const radios = radio.querySelectorAll('input');\n\n    if (radios.length) {\n      radios[0].focus();\n    }\n  }\n};\n/**\n * Converts `inputOptions` into an array of `[value, label]`s\n * @param inputOptions\n */\n\nconst formatInputOptions = inputOptions => {\n  const result = [];\n\n  if (typeof Map !== 'undefined' && inputOptions instanceof Map) {\n    inputOptions.forEach((value, key) => {\n      let valueFormatted = value;\n\n      if (typeof valueFormatted === 'object') {\n        // case of <optgroup>\n        valueFormatted = formatInputOptions(valueFormatted);\n      }\n\n      result.push([key, valueFormatted]);\n    });\n  } else {\n    Object.keys(inputOptions).forEach(key => {\n      let valueFormatted = inputOptions[key];\n\n      if (typeof valueFormatted === 'object') {\n        // case of <optgroup>\n        valueFormatted = formatInputOptions(valueFormatted);\n      }\n\n      result.push([key, valueFormatted]);\n    });\n  }\n\n  return result;\n};\n\nconst isSelected = (optionValue, inputValue) => {\n  return inputValue && inputValue.toString() === optionValue.toString();\n};","map":{"version":3,"sources":["C:/Users/dhild/source/mini-projects/blades-of-desolation/node_modules/sweetalert2/src/utils/dom/inputUtils.js"],"names":["dom","swalClasses","getDirectChildByClass","asPromise","error","hasToPromiseFn","isPromise","showLoading","handleInputOptionsAndValue","instance","params","input","handleInputOptions","includes","inputValue","getConfirmButton","handleInputValue","getInputValue","innerParams","getInput","getCheckboxValue","getRadioValue","getFileValue","inputAutoTrim","value","trim","checked","files","length","getAttribute","popup","getPopup","processInputOptions","inputOptions","populateInputOptions","formatInputOptions","then","hideLoading","hide","parseFloat","show","focus","catch","err","select","renderOption","parent","optionLabel","optionValue","option","document","createElement","setInnerHtml","selected","isSelected","appendChild","forEach","inputOption","Array","isArray","optgroup","label","disabled","o","radio","radioValue","radioLabel","radioInput","radioLabelElement","type","name","className","radios","querySelectorAll","result","Map","key","valueFormatted","push","Object","keys","toString"],"mappings":"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","sourcesContent":["import * as dom from './index.js'\nimport { swalClasses } from '../classes.js'\nimport { getDirectChildByClass } from './domUtils.js'\nimport { asPromise, error, hasToPromiseFn, isPromise } from '../utils.js'\nimport { showLoading } from '../../staticMethods/showLoading.js'\n\nexport const handleInputOptionsAndValue = (instance, params) => {\n  if (params.input === 'select' || params.input === 'radio') {\n    handleInputOptions(instance, params)\n  } else if (\n    ['text', 'email', 'number', 'tel', 'textarea'].includes(params.input) &&\n    (hasToPromiseFn(params.inputValue) || isPromise(params.inputValue))\n  ) {\n    showLoading(dom.getConfirmButton())\n    handleInputValue(instance, params)\n  }\n}\n\nexport const getInputValue = (instance, innerParams) => {\n  const input = instance.getInput()\n  if (!input) {\n    return null\n  }\n  switch (innerParams.input) {\n    case 'checkbox':\n      return getCheckboxValue(input)\n    case 'radio':\n      return getRadioValue(input)\n    case 'file':\n      return getFileValue(input)\n    default:\n      return innerParams.inputAutoTrim ? input.value.trim() : input.value\n  }\n}\n\nconst getCheckboxValue = (input) => (input.checked ? 1 : 0)\n\nconst getRadioValue = (input) => (input.checked ? input.value : null)\n\nconst getFileValue = (input) =>\n  input.files.length ? (input.getAttribute('multiple') !== null ? input.files : input.files[0]) : null\n\nconst handleInputOptions = (instance, params) => {\n  const popup = dom.getPopup()\n  const processInputOptions = (inputOptions) =>\n    populateInputOptions[params.input](popup, formatInputOptions(inputOptions), params)\n  if (hasToPromiseFn(params.inputOptions) || isPromise(params.inputOptions)) {\n    showLoading(dom.getConfirmButton())\n    asPromise(params.inputOptions).then((inputOptions) => {\n      instance.hideLoading()\n      processInputOptions(inputOptions)\n    })\n  } else if (typeof params.inputOptions === 'object') {\n    processInputOptions(params.inputOptions)\n  } else {\n    error(`Unexpected type of inputOptions! Expected object, Map or Promise, got ${typeof params.inputOptions}`)\n  }\n}\n\nconst handleInputValue = (instance, params) => {\n  const input = instance.getInput()\n  dom.hide(input)\n  asPromise(params.inputValue)\n    .then((inputValue) => {\n      input.value = params.input === 'number' ? parseFloat(inputValue) || 0 : `${inputValue}`\n      dom.show(input)\n      input.focus()\n      instance.hideLoading()\n    })\n    .catch((err) => {\n      error(`Error in inputValue promise: ${err}`)\n      input.value = ''\n      dom.show(input)\n      input.focus()\n      instance.hideLoading()\n    })\n}\n\nconst populateInputOptions = {\n  select: (popup, inputOptions, params) => {\n    const select = getDirectChildByClass(popup, swalClasses.select)\n    const renderOption = (parent, optionLabel, optionValue) => {\n      const option = document.createElement('option')\n      option.value = optionValue\n      dom.setInnerHtml(option, optionLabel)\n      option.selected = isSelected(optionValue, params.inputValue)\n      parent.appendChild(option)\n    }\n    inputOptions.forEach((inputOption) => {\n      const optionValue = inputOption[0]\n      const optionLabel = inputOption[1]\n      // <optgroup> spec:\n      // https://www.w3.org/TR/html401/interact/forms.html#h-17.6\n      // \"...all OPTGROUP elements must be specified directly within a SELECT element (i.e., groups may not be nested)...\"\n      // check whether this is a <optgroup>\n      if (Array.isArray(optionLabel)) {\n        // if it is an array, then it is an <optgroup>\n        const optgroup = document.createElement('optgroup')\n        optgroup.label = optionValue\n        optgroup.disabled = false // not configurable for now\n        select.appendChild(optgroup)\n        optionLabel.forEach((o) => renderOption(optgroup, o[1], o[0]))\n      } else {\n        // case of <option>\n        renderOption(select, optionLabel, optionValue)\n      }\n    })\n    select.focus()\n  },\n\n  radio: (popup, inputOptions, params) => {\n    const radio = getDirectChildByClass(popup, swalClasses.radio)\n    inputOptions.forEach((inputOption) => {\n      const radioValue = inputOption[0]\n      const radioLabel = inputOption[1]\n      const radioInput = document.createElement('input')\n      const radioLabelElement = document.createElement('label')\n      radioInput.type = 'radio'\n      radioInput.name = swalClasses.radio\n      radioInput.value = radioValue\n      if (isSelected(radioValue, params.inputValue)) {\n        radioInput.checked = true\n      }\n      const label = document.createElement('span')\n      dom.setInnerHtml(label, radioLabel)\n      label.className = swalClasses.label\n      radioLabelElement.appendChild(radioInput)\n      radioLabelElement.appendChild(label)\n      radio.appendChild(radioLabelElement)\n    })\n    const radios = radio.querySelectorAll('input')\n    if (radios.length) {\n      radios[0].focus()\n    }\n  },\n}\n\n/**\n * Converts `inputOptions` into an array of `[value, label]`s\n * @param inputOptions\n */\nconst formatInputOptions = (inputOptions) => {\n  const result = []\n  if (typeof Map !== 'undefined' && inputOptions instanceof Map) {\n    inputOptions.forEach((value, key) => {\n      let valueFormatted = value\n      if (typeof valueFormatted === 'object') {\n        // case of <optgroup>\n        valueFormatted = formatInputOptions(valueFormatted)\n      }\n      result.push([key, valueFormatted])\n    })\n  } else {\n    Object.keys(inputOptions).forEach((key) => {\n      let valueFormatted = inputOptions[key]\n      if (typeof valueFormatted === 'object') {\n        // case of <optgroup>\n        valueFormatted = formatInputOptions(valueFormatted)\n      }\n      result.push([key, valueFormatted])\n    })\n  }\n  return result\n}\n\nconst isSelected = (optionValue, inputValue) => {\n  return inputValue && inputValue.toString() === optionValue.toString()\n}\n"]},"metadata":{},"sourceType":"module"}