{"ast":null,"code":"import { animateTimerProgressBar, stopTimerProgressBar } from '../utils/dom/domUtils.js';\nimport globalState from '../globalState.js';\n/**\n * If `timer` parameter is set, returns number of milliseconds of timer remained.\n * Otherwise, returns undefined.\n */\n\nexport const getTimerLeft = () => {\n  return globalState.timeout && globalState.timeout.getTimerLeft();\n};\n/**\n * Stop timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n */\n\nexport const stopTimer = () => {\n  if (globalState.timeout) {\n    stopTimerProgressBar();\n    return globalState.timeout.stop();\n  }\n};\n/**\n * Resume timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n */\n\nexport const resumeTimer = () => {\n  if (globalState.timeout) {\n    const remaining = globalState.timeout.start();\n    animateTimerProgressBar(remaining);\n    return remaining;\n  }\n};\n/**\n * Resume timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n */\n\nexport const toggleTimer = () => {\n  const timer = globalState.timeout;\n  return timer && (timer.running ? stopTimer() : resumeTimer());\n};\n/**\n * Increase timer. Returns number of milliseconds of an updated timer.\n * If `timer` parameter isn't set, returns undefined.\n */\n\nexport const increaseTimer = n => {\n  if (globalState.timeout) {\n    const remaining = globalState.timeout.increase(n);\n    animateTimerProgressBar(remaining, true);\n    return remaining;\n  }\n};\n/**\n * Check if timer is running. Returns true if timer is running\n * or false if timer is paused or stopped.\n * If `timer` parameter isn't set, returns undefined\n */\n\nexport const isTimerRunning = () => {\n  return globalState.timeout && globalState.timeout.isRunning();\n};","map":{"version":3,"sources":["C:/Users/dhild/source/mini-projects/blades-of-desolation/node_modules/sweetalert2/src/staticMethods/timer.js"],"names":["animateTimerProgressBar","stopTimerProgressBar","globalState","getTimerLeft","timeout","stopTimer","stop","resumeTimer","remaining","start","toggleTimer","timer","running","increaseTimer","n","increase","isTimerRunning","isRunning"],"mappings":"AAAA,SAASA,uBAAT,EAAkCC,oBAAlC,QAA8D,0BAA9D;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAChC,SAAOD,WAAW,CAACE,OAAZ,IAAuBF,WAAW,CAACE,OAAZ,CAAoBD,YAApB,EAA9B;AACD,CAFM;AAIP;AACA;AACA;AACA;;AACA,OAAO,MAAME,SAAS,GAAG,MAAM;AAC7B,MAAIH,WAAW,CAACE,OAAhB,EAAyB;AACvBH,IAAAA,oBAAoB;AACpB,WAAOC,WAAW,CAACE,OAAZ,CAAoBE,IAApB,EAAP;AACD;AACF,CALM;AAOP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/B,MAAIL,WAAW,CAACE,OAAhB,EAAyB;AACvB,UAAMI,SAAS,GAAGN,WAAW,CAACE,OAAZ,CAAoBK,KAApB,EAAlB;AACAT,IAAAA,uBAAuB,CAACQ,SAAD,CAAvB;AACA,WAAOA,SAAP;AACD;AACF,CANM;AAQP;AACA;AACA;AACA;;AACA,OAAO,MAAME,WAAW,GAAG,MAAM;AAC/B,QAAMC,KAAK,GAAGT,WAAW,CAACE,OAA1B;AACA,SAAOO,KAAK,KAAKA,KAAK,CAACC,OAAN,GAAgBP,SAAS,EAAzB,GAA8BE,WAAW,EAA9C,CAAZ;AACD,CAHM;AAKP;AACA;AACA;AACA;;AACA,OAAO,MAAMM,aAAa,GAAIC,CAAD,IAAO;AAClC,MAAIZ,WAAW,CAACE,OAAhB,EAAyB;AACvB,UAAMI,SAAS,GAAGN,WAAW,CAACE,OAAZ,CAAoBW,QAApB,CAA6BD,CAA7B,CAAlB;AACAd,IAAAA,uBAAuB,CAACQ,SAAD,EAAY,IAAZ,CAAvB;AACA,WAAOA,SAAP;AACD;AACF,CANM;AAQP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMQ,cAAc,GAAG,MAAM;AAClC,SAAOd,WAAW,CAACE,OAAZ,IAAuBF,WAAW,CAACE,OAAZ,CAAoBa,SAApB,EAA9B;AACD,CAFM","sourcesContent":["import { animateTimerProgressBar, stopTimerProgressBar } from '../utils/dom/domUtils.js'\nimport globalState from '../globalState.js'\n\n/**\n * If `timer` parameter is set, returns number of milliseconds of timer remained.\n * Otherwise, returns undefined.\n */\nexport const getTimerLeft = () => {\n  return globalState.timeout && globalState.timeout.getTimerLeft()\n}\n\n/**\n * Stop timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n */\nexport const stopTimer = () => {\n  if (globalState.timeout) {\n    stopTimerProgressBar()\n    return globalState.timeout.stop()\n  }\n}\n\n/**\n * Resume timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n */\nexport const resumeTimer = () => {\n  if (globalState.timeout) {\n    const remaining = globalState.timeout.start()\n    animateTimerProgressBar(remaining)\n    return remaining\n  }\n}\n\n/**\n * Resume timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n */\nexport const toggleTimer = () => {\n  const timer = globalState.timeout\n  return timer && (timer.running ? stopTimer() : resumeTimer())\n}\n\n/**\n * Increase timer. Returns number of milliseconds of an updated timer.\n * If `timer` parameter isn't set, returns undefined.\n */\nexport const increaseTimer = (n) => {\n  if (globalState.timeout) {\n    const remaining = globalState.timeout.increase(n)\n    animateTimerProgressBar(remaining, true)\n    return remaining\n  }\n}\n\n/**\n * Check if timer is running. Returns true if timer is running\n * or false if timer is paused or stopped.\n * If `timer` parameter isn't set, returns undefined\n */\nexport const isTimerRunning = () => {\n  return globalState.timeout && globalState.timeout.isRunning()\n}\n"]},"metadata":{},"sourceType":"module"}