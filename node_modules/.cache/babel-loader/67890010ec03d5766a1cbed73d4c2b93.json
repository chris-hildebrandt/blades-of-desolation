{"ast":null,"code":"import _defineProperty from \"C:/Users/dhild/source/mini-projects/blades-of-desolation/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Item } from \"@/models/Item\";\nimport $store from '@/store/index';\nimport Notify from \"@/utils/Notify\";\nimport { useToast } from \"vue-toastification\";\n\nclass QuestService {\n  constructor() {\n    _defineProperty(this, \"toast\", useToast());\n  }\n\n  getQuest(newQuest) {\n    let quest = { ...newQuest\n    };\n\n    if (quest.objective == 'kill') {\n      let monstersList = $store.state[quest.target][$store.state.location];\n      let index = Math.floor(Math.random() * monstersList.length);\n      quest.target = monstersList[index].name;\n      quest.objective += ' X' + quest.goal;\n      quest.reward = quest.reward * (index > 0 ? index : 1);\n    }\n\n    if (quest.objective == 'find') {\n      let itemList = $store.state[quest.target + 's'].filter(i => i.rarity == quest.goal);\n      let index = Math.floor(Math.random() * itemList.length);\n      quest.target = itemList[index].name;\n      itemList = $store.state[newQuest.target + 's'].filter(i => i.rarity == quest.reward);\n      index = Math.floor(Math.random() * itemList.length);\n      quest.reward = itemList[index].name;\n    }\n\n    if (quest.objective == 'explore') {\n      let row = Math.ceil(Math.random() * 10);\n      let col = Math.ceil(Math.random() * 12);\n      quest.target = Math.floor(Math.random() * ($store.state.player.explored.filter(e => e.length > 0).length - 1));\n      quest.goal = quest.target + '-' + row + '-' + col;\n      quest.reward = (quest.target + 1) * row * col;\n    }\n\n    return quest;\n  }\n\n  updateQuest() {\n    let quest = $store.state.player.quest;\n\n    if (!quest.objective) {\n      return;\n    }\n\n    if (quest.objective.includes('kill')) {\n      $store.state.combatMonsters.forEach(m => {\n        if (m.name == quest.target) {\n          quest.progress++;\n        }\n      });\n\n      if (quest.progress >= quest.goal) {\n        this.toast.success('Quest completed!');\n      }\n    }\n\n    if (quest.objective == 'find') {\n      $store.state.player.items.forEach(i => {\n        if (i.name == quest.target) {\n          quest.progress = 'complete';\n          this.toast.success('Quest completed!');\n        }\n      });\n    }\n\n    if (quest.objective == 'explore') {\n      let currentLocation = $store.state.player.explored[$store.state.location][$store.state.player.explored[$store.state.location].length - 1];\n\n      if (quest.goal == currentLocation) {\n        quest.progress = 'complete';\n        this.toast.success('Quest completed!');\n      }\n    }\n  }\n\n  async checkQuestProgress() {\n    let quest = $store.state.player.quest;\n\n    if ((quest.progress >= quest.goal || quest.progress == 'complete') && quest.objective) {\n      if (await Notify.confirm('Quest Completed!', 'Turn in quest for reward?')) {\n        this.completeQuest();\n      }\n    }\n  }\n\n  completeQuest() {\n    let quest = $store.state.player.quest;\n\n    if (quest.objective == 'find') {\n      $store.state.player.items = $store.state.player.items.filter(i => i.name != quest.name);\n      let item = $store.state.items.filter(i => i.name == quest.reward);\n      $store.state.player.items.push(new Item(item[0]));\n    }\n\n    if (quest.objective.includes('kill')) {\n      $store.state.player.gold += quest.reward;\n    }\n\n    if (quest.objective == 'explore') {\n      $store.state.player.characters.forEach(c => c.exp += quest.reward);\n    }\n\n    this.toast.success('Quest Complete');\n    $store.state.player.quest = {};\n  }\n\n  deleteQuest() {\n    $store.state.player.quest = {};\n  }\n\n}\n\nexport const questService = new QuestService();","map":{"version":3,"sources":["C:/Users/dhild/source/mini-projects/blades-of-desolation/src/services/QuestService.js"],"names":["Item","$store","Notify","useToast","QuestService","getQuest","newQuest","quest","objective","monstersList","state","target","location","index","Math","floor","random","length","name","goal","reward","itemList","filter","i","rarity","row","ceil","col","player","explored","e","updateQuest","includes","combatMonsters","forEach","m","progress","toast","success","items","currentLocation","checkQuestProgress","confirm","completeQuest","item","push","gold","characters","c","exp","deleteQuest","questService"],"mappings":"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","sourcesContent":["import { Item } from \"@/models/Item\"\r\nimport $store from '@/store/index'\r\nimport Notify from \"@/utils/Notify\"\r\nimport { useToast } from \"vue-toastification\"\r\nclass QuestService{\r\n  toast = useToast()\r\n  getQuest(newQuest){\r\n    let quest = {...newQuest}\r\n    if(quest.objective == 'kill'){\r\n      let monstersList = $store.state[quest.target][$store.state.location]\r\n      let index = Math.floor(Math.random()*monstersList.length)\r\n      quest.target = monstersList[index].name\r\n      quest.objective += ' X'+quest.goal\r\n      quest.reward = quest.reward*(index > 0 ? index : 1)\r\n    }\r\n    if(quest.objective == 'find'){\r\n      let itemList = $store.state[quest.target+'s'].filter(i => i.rarity == quest.goal)\r\n      let index = Math.floor(Math.random()*itemList.length)\r\n      quest.target = itemList[index].name\r\n      itemList = $store.state[newQuest.target+'s'].filter(i => i.rarity == quest.reward)\r\n      index = Math.floor(Math.random()*itemList.length)\r\n      quest.reward = itemList[index].name\r\n    }\r\n    if(quest.objective == 'explore'){\r\n      let row = Math.ceil(Math.random()*10)\r\n      let col = Math.ceil(Math.random()*12)\r\n      quest.target = Math.floor(Math.random()*($store.state.player.explored.filter(e => e.length > 0).length-1))\r\n      quest.goal = quest.target+'-'+row+'-'+col\r\n      quest.reward = (quest.target+1)*row*col\r\n    }\r\n    return quest\r\n  }\r\n\r\n  updateQuest(){\r\n    let quest = $store.state.player.quest\r\n    if(!quest.objective){return}\r\n    if(quest.objective.includes('kill')){ \r\n      $store.state.combatMonsters.forEach(m => {\r\n        if(m.name == quest.target){\r\n          quest.progress++\r\n        }\r\n      })\r\n      if(quest.progress >= quest.goal){\r\n        this.toast.success('Quest completed!')\r\n      }\r\n    }\r\n    if(quest.objective == 'find'){\r\n      $store.state.player.items.forEach(i => {\r\n        if(i.name == quest.target){\r\n          quest.progress = 'complete'\r\n          this.toast.success('Quest completed!')\r\n        }\r\n      })\r\n    }\r\n    if(quest.objective == 'explore'){\r\n      let currentLocation = $store.state.player.explored[$store.state.location][$store.state.player.explored[$store.state.location].length -1]\r\n      if(quest.goal == currentLocation){\r\n        quest.progress = 'complete'\r\n        this.toast.success('Quest completed!')\r\n      }\r\n    }\r\n  }\r\n  async checkQuestProgress(){\r\n    let quest = $store.state.player.quest\r\n    if((quest.progress >= quest.goal || quest.progress == 'complete') && quest.objective){\r\n      if(await Notify.confirm('Quest Completed!', 'Turn in quest for reward?')){\r\n        this.completeQuest()\r\n      }\r\n    }\r\n  }\r\n  completeQuest(){\r\n    let quest = $store.state.player.quest\r\n    if(quest.objective == 'find'){\r\n      $store.state.player.items = $store.state.player.items.filter(i => i.name != quest.name)\r\n      let item = $store.state.items.filter(i => i.name == quest.reward)\r\n      $store.state.player.items.push(new Item(item[0]))\r\n    }\r\n    if(quest.objective.includes('kill')){\r\n      $store.state.player.gold += quest.reward\r\n    }\r\n    if(quest.objective == 'explore'){\r\n      $store.state.player.characters.forEach(c => c.exp += quest.reward)\r\n    }\r\n    this.toast.success('Quest Complete')\r\n    $store.state.player.quest = {}\r\n  }\r\n  deleteQuest(){\r\n    $store.state.player.quest = {}\r\n  }\r\n}\r\n\r\nexport const questService = new QuestService()"]},"metadata":{},"sourceType":"module"}