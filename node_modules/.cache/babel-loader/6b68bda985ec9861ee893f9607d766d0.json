{"ast":null,"code":"import * as dom from '../../src/utils/dom/index.js';\nimport { warn } from '../../src/utils/utils.js';\nimport privateProps from '../privateProps.js';\nimport { isUpdatableParameter } from '../../src/utils/params.js';\n/**\n * Updates popup parameters.\n */\n\nexport function update(params) {\n  const popup = dom.getPopup();\n  const innerParams = privateProps.innerParams.get(this);\n\n  if (!popup || dom.hasClass(popup, innerParams.hideClass.popup)) {\n    return warn(`You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.`);\n  }\n\n  const validUpdatableParams = filterValidParams(params);\n  const updatedParams = Object.assign({}, innerParams, validUpdatableParams);\n  dom.render(this, updatedParams);\n  privateProps.innerParams.set(this, updatedParams);\n  Object.defineProperties(this, {\n    params: {\n      value: Object.assign({}, this.params, params),\n      writable: false,\n      enumerable: true\n    }\n  });\n}\n\nconst filterValidParams = params => {\n  const validUpdatableParams = {};\n  Object.keys(params).forEach(param => {\n    if (isUpdatableParameter(param)) {\n      validUpdatableParams[param] = params[param];\n    } else {\n      warn(`Invalid parameter to update: \"${param}\". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js\\n\\nIf you think this parameter should be updatable, request it here: https://github.com/sweetalert2/sweetalert2/issues/new?template=02_feature_request.md`);\n    }\n  });\n  return validUpdatableParams;\n};","map":{"version":3,"sources":["C:/Users/dhild/source/mini-projects/blades-of-desolation/node_modules/sweetalert2/src/instanceMethods/update.js"],"names":["dom","warn","privateProps","isUpdatableParameter","update","params","popup","getPopup","innerParams","get","hasClass","hideClass","validUpdatableParams","filterValidParams","updatedParams","Object","assign","render","set","defineProperties","value","writable","enumerable","keys","forEach","param"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,8BAArB;AACA,SAASC,IAAT,QAAqB,0BAArB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,SAASC,oBAAT,QAAqC,2BAArC;AAEA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AAC7B,QAAMC,KAAK,GAAGN,GAAG,CAACO,QAAJ,EAAd;AACA,QAAMC,WAAW,GAAGN,YAAY,CAACM,WAAb,CAAyBC,GAAzB,CAA6B,IAA7B,CAApB;;AAEA,MAAI,CAACH,KAAD,IAAUN,GAAG,CAACU,QAAJ,CAAaJ,KAAb,EAAoBE,WAAW,CAACG,SAAZ,CAAsBL,KAA1C,CAAd,EAAgE;AAC9D,WAAOL,IAAI,CACR,4IADQ,CAAX;AAGD;;AAED,QAAMW,oBAAoB,GAAGC,iBAAiB,CAACR,MAAD,CAA9C;AAEA,QAAMS,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,WAAlB,EAA+BI,oBAA/B,CAAtB;AAEAZ,EAAAA,GAAG,CAACiB,MAAJ,CAAW,IAAX,EAAiBH,aAAjB;AAEAZ,EAAAA,YAAY,CAACM,WAAb,CAAyBU,GAAzB,CAA6B,IAA7B,EAAmCJ,aAAnC;AACAC,EAAAA,MAAM,CAACI,gBAAP,CAAwB,IAAxB,EAA8B;AAC5Bd,IAAAA,MAAM,EAAE;AACNe,MAAAA,KAAK,EAAEL,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKX,MAAvB,EAA+BA,MAA/B,CADD;AAENgB,MAAAA,QAAQ,EAAE,KAFJ;AAGNC,MAAAA,UAAU,EAAE;AAHN;AADoB,GAA9B;AAOD;;AAED,MAAMT,iBAAiB,GAAIR,MAAD,IAAY;AACpC,QAAMO,oBAAoB,GAAG,EAA7B;AACAG,EAAAA,MAAM,CAACQ,IAAP,CAAYlB,MAAZ,EAAoBmB,OAApB,CAA6BC,KAAD,IAAW;AACrC,QAAItB,oBAAoB,CAACsB,KAAD,CAAxB,EAAiC;AAC/Bb,MAAAA,oBAAoB,CAACa,KAAD,CAApB,GAA8BpB,MAAM,CAACoB,KAAD,CAApC;AACD,KAFD,MAEO;AACLxB,MAAAA,IAAI,CACD,iCAAgCwB,KAAM,2QADrC,CAAJ;AAGD;AACF,GARD;AASA,SAAOb,oBAAP;AACD,CAZD","sourcesContent":["import * as dom from '../../src/utils/dom/index.js'\nimport { warn } from '../../src/utils/utils.js'\nimport privateProps from '../privateProps.js'\nimport { isUpdatableParameter } from '../../src/utils/params.js'\n\n/**\n * Updates popup parameters.\n */\nexport function update(params) {\n  const popup = dom.getPopup()\n  const innerParams = privateProps.innerParams.get(this)\n\n  if (!popup || dom.hasClass(popup, innerParams.hideClass.popup)) {\n    return warn(\n      `You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.`\n    )\n  }\n\n  const validUpdatableParams = filterValidParams(params)\n\n  const updatedParams = Object.assign({}, innerParams, validUpdatableParams)\n\n  dom.render(this, updatedParams)\n\n  privateProps.innerParams.set(this, updatedParams)\n  Object.defineProperties(this, {\n    params: {\n      value: Object.assign({}, this.params, params),\n      writable: false,\n      enumerable: true,\n    },\n  })\n}\n\nconst filterValidParams = (params) => {\n  const validUpdatableParams = {}\n  Object.keys(params).forEach((param) => {\n    if (isUpdatableParameter(param)) {\n      validUpdatableParams[param] = params[param]\n    } else {\n      warn(\n        `Invalid parameter to update: \"${param}\". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js\\n\\nIf you think this parameter should be updatable, request it here: https://github.com/sweetalert2/sweetalert2/issues/new?template=02_feature_request.md`\n      )\n    }\n  })\n  return validUpdatableParams\n}\n"]},"metadata":{},"sourceType":"module"}