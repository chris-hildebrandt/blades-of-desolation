{"ast":null,"code":"import _defineProperty from \"C:/Users/dhild/source/mini-projects/blades-of-desolation/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Item } from \"@/models/Item\";\nimport { MonsterFactory } from \"@/models/MonsterFactory\";\nimport $store from '@/store/index.js';\nimport { abilityList } from \"@/utils/abilityChart\";\nimport { characterLvlUpStatHelper } from \"@/utils/characterLvlUpStatHelper\";\nimport { determineRaceClassItem } from \"@/utils/determineRaceClassItem\";\nimport { useToast } from \"vue-toastification\";\nimport { abilitiesService } from \"./AbilitiesService\";\nimport { buffService } from \"./BuffService\";\nimport { characterService } from \"./CharacterService\";\nimport { itemsService } from \"./ItemsService\";\nimport { questService } from \"./QuestService\";\nimport $ from 'jquery';\n\nclass GameService {\n  constructor() {\n    _defineProperty(this, \"toast\", useToast());\n  }\n\n  spawnMonsters(monsterLvl = $store.state.location, numMonsters = null) {\n    $store.state.combatMonsters = [];\n    let currentLocationSet = $store.state.player.currentLocation.split('-');\n    let maxMonsters = currentLocationSet[1] > 5 || currentLocationSet[2] > 6 ? 6 : 3;\n    let quantity = numMonsters ?? Math.ceil(Math.random() * maxMonsters);\n\n    for (let i = 0; i < quantity; i++) {\n      let monstersList = $store.state.monsters[monsterLvl];\n      let index = Math.floor(Math.random() * monstersList.length);\n      let newMonster = { ...monstersList[index]\n      };\n\n      if (newMonster.loot.items.length > 0) {\n        newMonster.loot = { ...newMonster.loot\n        };\n        newMonster.loot.items = newMonster.loot.items.filter((item, index) => {\n          let chance = Math.ceil(Math.random() * 100) - characterService.getPartyLuck();\n          return newMonster.loot.chance[index] > chance;\n        });\n      } // dereference statusEffects object\n\n\n      if (newMonster['statusEffects']) {\n        newMonster['statusEffects'] = [];\n\n        for (let i = 0; i < monstersList[index].statusEffects.length; i++) {\n          newMonster['statusEffects'].push({ ...monstersList[index].statusEffects[i]\n          });\n        }\n      }\n\n      $store.state.combatMonsters.push(new MonsterFactory(newMonster));\n    }\n\n    itemsService.randomItemDrop();\n  }\n\n  victory() {\n    questService.updateQuest();\n    characterService.resetExtraStats();\n    this.removeBuffs();\n    this.addKillCounts();\n    this.handleExpGain();\n    this.loot();\n  }\n\n  handleExpGain() {\n    let totalExp = $store.state.combatMonsters.map(m => m.exp).reduce((previous, current) => previous + current);\n    let charNum = $store.state.player.characters.filter(c => c.hp > 0 && c.inBattle).length;\n    let delay = 500;\n    $store.state.player.characters.forEach(c => {\n      if (c.hp > 0 && c.inBattle) {\n        c.exp += totalExp / charNum;\n\n        if (c.exp >= $store.state.levelUpChart[c.level]) {\n          this.levelUp(c);\n          setTimeout(() => {\n            this.toast.success(c.name + ' Leveled Up! Go to details to improve stats.', {\n              timeout: 10000\n            });\n          }, delay);\n          delay += 2500;\n        }\n      }\n    });\n  }\n\n  getSpeedCost(attacker, speed = false) {\n    let speedCost = speed;\n\n    if (!speed && speed !== 0) {\n      speedCost = 3;\n      attacker.equipment.forEach(e => {\n        speedCost += e.speed;\n      });\n    }\n\n    return speedCost;\n  }\n\n  setTimer() {\n    if ($store.state.player?.options && $store.state.player.options?.difficulty == 'easy') {\n      return;\n    }\n\n    $('.modal').each(function () {\n      $(this).hide();\n      $('.modal-backdrop').remove();\n    });\n    clearInterval($store.state.timerInterval);\n    $store.state.timer = 10000 * $store.state.player.characters.length;\n    $store.state.timerInterval = setInterval(() => {\n      $store.state.timer -= 100;\n    }, 100);\n  }\n\n  loot() {\n    $store.state.combatMonsters.forEach(c => {\n      $store.state.player.gold += c.loot.gold;\n      c.loot.items.forEach(li => {\n        let item = $store.state.items.filter(i => i.name == li);\n        $store.state.player.items.push(new Item(item[0]));\n      });\n\n      if (c.equipment.length > 0) {\n        c.equipment.forEach(ei => {\n          let item = $store.state.items.filter(i => i.name == ei);\n          $store.state.player.items.push(new Item(item[0]));\n        });\n      }\n    });\n  }\n\n  removeBuffs() {\n    $store.state.player.characters.forEach(c => {\n      c.buffs.forEach(b => buffService.removeBuff(c, b));\n      c.debuffs.forEach(b => buffService.removeDebuff(c, b));\n      c.buffs = [];\n      c.debuffs = [];\n    });\n  }\n\n  addKillCounts() {\n    $store.state.combatMonsters.forEach(m => {\n      if (!$store.state.player.kills[m.name]) {\n        $store.state.player.kills[m.name] = 1;\n      } else {\n        $store.state.player.kills[m.name]++;\n      }\n    });\n  }\n\n  async levelUp(character) {\n    character.level++;\n    let lvlUpBoosts = characterLvlUpStatHelper(character.classType, character.race, character.level);\n    lvlUpBoosts.classBoost.forEach(stat => character[stat]++);\n    lvlUpBoosts.raceBoost.forEach(stat => character[stat]++);\n    character.abilities.forEach(ability => abilitiesService.levelUpAbility(ability.name, character));\n\n    if (abilityList[character.classType][character.level]) {\n      abilitiesService.learnAbility(abilityList[character.classType][character.level], character);\n    }\n\n    character.hp += character.level * 3;\n    character.baseHp += character.level * 3;\n    character.statBonus += 2;\n  }\n\n  addHealthPot() {\n    let item = $store.state.items.find(i => i.name == 'health potion' && i.rarity == 'c');\n    $store.state.player.items.push(new Item(item));\n  }\n\n  getRaceClassSpecificItem(char) {\n    let itemName = determineRaceClassItem(char.race, char.classType);\n    let item = new Item($store.state.items.find(i => i.name == itemName));\n    $store.state.player.items.push(item);\n\n    if (item.type != 'consumable') {\n      itemsService.equipItem(char, item);\n    }\n  }\n\n}\n\nexport const gameService = new GameService();","map":{"version":3,"sources":["C:/Users/dhild/source/mini-projects/blades-of-desolation/src/services/GameService.js"],"names":["Item","MonsterFactory","$store","abilityList","characterLvlUpStatHelper","determineRaceClassItem","useToast","abilitiesService","buffService","characterService","itemsService","questService","$","GameService","spawnMonsters","monsterLvl","state","location","numMonsters","combatMonsters","currentLocationSet","player","currentLocation","split","maxMonsters","quantity","Math","ceil","random","i","monstersList","monsters","index","floor","length","newMonster","loot","items","filter","item","chance","getPartyLuck","statusEffects","push","randomItemDrop","victory","updateQuest","resetExtraStats","removeBuffs","addKillCounts","handleExpGain","totalExp","map","m","exp","reduce","previous","current","charNum","characters","c","hp","inBattle","delay","forEach","levelUpChart","level","levelUp","setTimeout","toast","success","name","timeout","getSpeedCost","attacker","speed","speedCost","equipment","e","setTimer","options","difficulty","each","hide","remove","clearInterval","timerInterval","timer","setInterval","gold","li","ei","buffs","b","removeBuff","debuffs","removeDebuff","kills","character","lvlUpBoosts","classType","race","classBoost","stat","raceBoost","abilities","ability","levelUpAbility","learnAbility","baseHp","statBonus","addHealthPot","find","rarity","getRaceClassSpecificItem","char","itemName","type","equipItem","gameService"],"mappings":"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","sourcesContent":["import { Item } from \"@/models/Item\"\r\nimport { MonsterFactory } from \"@/models/MonsterFactory\"\r\nimport $store from '@/store/index.js'\r\nimport { abilityList } from \"@/utils/abilityChart\"\r\nimport { characterLvlUpStatHelper } from \"@/utils/characterLvlUpStatHelper\"\r\nimport { determineRaceClassItem } from \"@/utils/determineRaceClassItem\"\r\nimport { useToast } from \"vue-toastification\"\r\nimport { abilitiesService } from \"./AbilitiesService\"\r\nimport { buffService } from \"./BuffService\"\r\nimport { characterService } from \"./CharacterService\"\r\nimport { itemsService } from \"./ItemsService\"\r\nimport { questService } from \"./QuestService\"\r\nimport $ from 'jquery'\r\nclass GameService{\r\n  toast = useToast()\r\n  spawnMonsters(monsterLvl = $store.state.location, numMonsters = null){\r\n    $store.state.combatMonsters = []\r\n    let currentLocationSet = $store.state.player.currentLocation.split('-')\r\n    let maxMonsters = currentLocationSet[1] > 5 || currentLocationSet[2] > 6 ? 6 : 3\r\n    let quantity = numMonsters ?? Math.ceil(Math.random()*maxMonsters)\r\n    for(let i=0; i<quantity; i++){\r\n      let monstersList = $store.state.monsters[monsterLvl]\r\n      let index = Math.floor(Math.random()*monstersList.length)\r\n      let newMonster = {...monstersList[index]}\r\n      if(newMonster.loot.items.length > 0){\r\n        newMonster.loot = {...newMonster.loot}\r\n        newMonster.loot.items = newMonster.loot.items.filter((item, index) => {\r\n          let chance = Math.ceil(Math.random()*100)-characterService.getPartyLuck()\r\n          return newMonster.loot.chance[index] > chance\r\n        })\r\n      }\r\n      // dereference statusEffects object\r\n      if(newMonster['statusEffects']){\r\n        newMonster['statusEffects'] = []\r\n        for(let i = 0; i < monstersList[index].statusEffects.length; i++){\r\n          newMonster['statusEffects'].push({...monstersList[index].statusEffects[i]})\r\n        }\r\n      }\r\n      $store.state.combatMonsters.push(new MonsterFactory(newMonster))\r\n    }\r\n    itemsService.randomItemDrop()\r\n  }\r\n  victory(){\r\n    questService.updateQuest()\r\n    characterService.resetExtraStats()\r\n    this.removeBuffs()\r\n    this.addKillCounts()\r\n    this.handleExpGain()\r\n    this.loot()\r\n  }\r\n  handleExpGain(){\r\n    let totalExp = $store.state.combatMonsters.map(m => m.exp).reduce((previous, current) => previous + current)\r\n    let charNum = $store.state.player.characters.filter(c => c.hp > 0 && c.inBattle).length\r\n    let delay = 500\r\n    $store.state.player.characters.forEach(c => {\r\n      if(c.hp > 0 && c.inBattle){\r\n        c.exp += totalExp/charNum\r\n        if(c.exp >= $store.state.levelUpChart[c.level]){\r\n          this.levelUp(c)\r\n          setTimeout(() => {\r\n            this.toast.success(c.name+' Leveled Up! Go to details to improve stats.', {timeout: 10000})\r\n          }, delay);\r\n          delay += 2500\r\n        }\r\n      }\r\n      })\r\n  }\r\n  getSpeedCost(attacker, speed = false){\r\n    let speedCost = speed\r\n    if(!speed && speed !== 0){\r\n      speedCost = 3\r\n      attacker.equipment.forEach(e => {\r\n        speedCost += e.speed\r\n      })\r\n    }\r\n    return speedCost\r\n  }\r\n  setTimer(){\r\n    if($store.state.player?.options && $store.state.player.options?.difficulty == 'easy'){return}\r\n    $('.modal').each(function(){\r\n      $(this).hide()\r\n      $('.modal-backdrop').remove()\r\n    })\r\n    clearInterval($store.state.timerInterval)\r\n    $store.state.timer = 10000*$store.state.player.characters.length\r\n    $store.state.timerInterval = setInterval(()=>{\r\n      $store.state.timer -= 100\r\n    }, 100)\r\n  }\r\n  loot(){\r\n    $store.state.combatMonsters.forEach(c => {\r\n      $store.state.player.gold += c.loot.gold\r\n      c.loot.items.forEach(li => {\r\n        let item = $store.state.items.filter(i => i.name == li)\r\n        $store.state.player.items.push(new Item(item[0]))\r\n      })\r\n      if(c.equipment.length > 0){\r\n        c.equipment.forEach(ei => {\r\n          let item = $store.state.items.filter(i => i.name == ei)\r\n          $store.state.player.items.push(new Item(item[0]))\r\n        })\r\n      }\r\n    })\r\n  }\r\n  removeBuffs(){\r\n    $store.state.player.characters.forEach(c => {\r\n      c.buffs.forEach(b => buffService.removeBuff(c, b))\r\n      c.debuffs.forEach(b => buffService.removeDebuff(c, b))\r\n      c.buffs = []\r\n      c.debuffs = []\r\n    })\r\n  }\r\n  addKillCounts(){\r\n    $store.state.combatMonsters.forEach(m => {\r\n      if(!$store.state.player.kills[m.name]){\r\n        $store.state.player.kills[m.name] = 1\r\n      }else{\r\n        $store.state.player.kills[m.name]++\r\n      }\r\n    })\r\n  }\r\n\r\n  async levelUp(character){\r\n    character.level++\r\n    let lvlUpBoosts = characterLvlUpStatHelper(character.classType, character.race, character.level)\r\n    lvlUpBoosts.classBoost.forEach(stat => character[stat]++)\r\n    lvlUpBoosts.raceBoost.forEach(stat => character[stat]++)\r\n\r\n    character.abilities.forEach(ability => abilitiesService.levelUpAbility(ability.name, character))\r\n    if(abilityList[character.classType][character.level]){\r\n      abilitiesService.learnAbility(abilityList[character.classType][character.level], character)\r\n    }\r\n\r\n    character.hp += character.level*3\r\n    character.baseHp += character.level*3\r\n\r\n    character.statBonus += 2\r\n  }\r\n  addHealthPot(){\r\n    let item = $store.state.items.find(i => i.name == 'health potion' && i.rarity == 'c')\r\n    $store.state.player.items.push(new Item(item))\r\n  }\r\n  getRaceClassSpecificItem(char){\r\n    let itemName = determineRaceClassItem(char.race, char.classType)\r\n    let item = new Item($store.state.items.find(i => i.name == itemName))\r\n    $store.state.player.items.push(item)\r\n    if(item.type != 'consumable'){\r\n      itemsService.equipItem(char, item)\r\n    }\r\n  }\r\n}\r\n\r\nexport const gameService = new GameService()"]},"metadata":{},"sourceType":"module"}