{"ast":null,"code":"import { reactive } from \"@vue/reactivity\";\nimport { computed, onMounted } from \"@vue/runtime-core\";\nimport $store from \"@/store/index.js\";\nimport { itemsService } from \"@/services/ItemsService\";\nimport { getRarityFullName } from '@/utils/getRarityFullName';\nimport { questService } from \"@/services/QuestService\";\nimport { characterService } from \"@/services/CharacterService\";\nimport Notify from \"@/utils/Notify\";\nimport { spellsService } from \"@/services/SpellsService\";\nimport SellShop from \"@/components/SellShop.vue\";\nimport GeneralShop from \"@/components/GeneralShop.vue\";\nimport MagicShop from \"@/components/MagicShop.vue\";\nexport default {\n  name: 'MainShop',\n  components: {\n    SellShop,\n    GeneralShop,\n    MagicShop\n  },\n\n  setup() {\n    onMounted(async () => {\n      // random chance to get a quest request \n      let luck = 1 + characterService.getPartyLuck();\n      let chance = Math.ceil(Math.random() * 25);\n\n      if (luck > chance && !$store.state.player.quest.objective) {\n        let index = Math.floor(Math.random() * $store.state.quests.length);\n        let newQuest = questService.getQuest($store.state.quests[index]); // TODO make ability to accept up to 3 quests\n\n        if (await Notify.confirm(newQuest.objective, newQuest.target + ' | Reward: ' + newQuest.reward)) {\n          $store.state.player.quest = newQuest;\n        }\n      }\n\n      questService.checkQuestProgress();\n      $store.state.shopItems = itemsService.getStoreItems();\n    });\n    const state = reactive({\n      playersGold: computed(() => $store.state.player.gold),\n      storeItems: computed(() => $store.state.shopItems),\n      quest: null,\n      activeShop: computed(() => $store.state.shop),\n      spellList: computed(() => spellsService.getRandomSpellList())\n    });\n    return state;\n  },\n\n  methods: {\n    getRarityFullName: getRarityFullName\n  }\n};","map":{"version":3,"mappings":"AAeA,SAASA,QAAT,QAAyB,iBAAzB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,mBAApC;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,eAAe;AACbC,MAAI,EAAE,UADO;AAEbC,YAAU,EAAE;AACXJ,YADW;AACDC,eADC;AACYC;AADZ,GAFC;;AAKbG,OAAK,GAAE;AACLb,aAAS,CAAC,YAAU;AAClB;AACA,UAAIc,IAAG,GAAI,IAAET,gBAAgB,CAACU,YAAjB,EAAb;AACA,UAAIC,MAAK,GAAIC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAc,EAAxB,CAAb;;AACA,UAAGL,IAAG,GAAIE,MAAP,IAAiB,CAACf,MAAM,CAACmB,KAAP,CAAaC,MAAb,CAAoBC,KAApB,CAA0BC,SAA/C,EAAyD;AACvD,YAAIC,KAAI,GAAIP,IAAI,CAACQ,KAAL,CAAWR,IAAI,CAACE,MAAL,KAAclB,MAAM,CAACmB,KAAP,CAAaM,MAAb,CAAoBC,MAA7C,CAAZ;AACA,YAAIC,QAAO,GAAIxB,YAAY,CAACyB,QAAb,CAAsB5B,MAAM,CAACmB,KAAP,CAAaM,MAAb,CAAoBF,KAApB,CAAtB,CAAf,CAFuD,CAGvD;;AACA,YAAG,MAAMlB,MAAM,CAACwB,OAAP,CAAeF,QAAQ,CAACL,SAAxB,EAAmCK,QAAQ,CAACG,MAAT,GAAgB,aAAhB,GAA8BH,QAAQ,CAACI,MAA1E,CAAT,EAA2F;AACzF/B,gBAAM,CAACmB,KAAP,CAAaC,MAAb,CAAoBC,KAApB,GAA4BM,QAA5B;AACF;AACF;;AACAxB,kBAAY,CAAC6B,kBAAb;AACAhC,YAAM,CAACmB,KAAP,CAAac,SAAb,GAAyBhC,YAAY,CAACiC,aAAb,EAAzB;AACD,KAdQ,CAAT;AAeA,UAAMf,KAAI,GAAItB,QAAQ,CAAC;AACrBsC,iBAAW,EAAErC,QAAQ,CAAC,MAAKE,MAAM,CAACmB,KAAP,CAAaC,MAAb,CAAoBgB,IAA1B,CADA;AAErBC,gBAAU,EAAEvC,QAAQ,CAAC,MAAKE,MAAM,CAACmB,KAAP,CAAac,SAAnB,CAFC;AAGrBZ,WAAK,EAAE,IAHc;AAIrBiB,gBAAU,EAAExC,QAAQ,CAAC,MAAKE,MAAM,CAACmB,KAAP,CAAaoB,IAAnB,CAJC;AAKrBC,eAAS,EAAE1C,QAAQ,CAAC,MAAKQ,aAAa,CAACmC,kBAAd,EAAN;AALE,KAAD,CAAtB;AAOA,WAAOtB,KAAP;AACD,GA7BY;;AA8BbuB,SAAO,EAAE;AACPxC,qBAAgB,EAAIA;AADb;AA9BI,CAAf","names":["reactive","computed","onMounted","$store","itemsService","getRarityFullName","questService","characterService","Notify","spellsService","SellShop","GeneralShop","MagicShop","name","components","setup","luck","getPartyLuck","chance","Math","ceil","random","state","player","quest","objective","index","floor","quests","length","newQuest","getQuest","confirm","target","reward","checkQuestProgress","shopItems","getStoreItems","playersGold","gold","storeItems","activeShop","shop","spellList","getRandomSpellList","methods"],"sourceRoot":"","sources":["C:\\Users\\dhild\\source\\mini-projects\\blades-of-desolation\\src\\views\\MainShop.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-5\">\r\n    <div v-if=\"activeShop == 'general'\">\r\n      <GeneralShop :storeItems=\"storeItems\" />\r\n    </div>\r\n    <div v-if=\"activeShop == 'sell'\">\r\n      <SellShop />\r\n    </div>\r\n    <div v-if=\"activeShop == 'magic'\">\r\n      <MagicShop :spellList=\"spellList\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { reactive } from \"@vue/reactivity\"\r\nimport { computed, onMounted } from \"@vue/runtime-core\"\r\nimport $store from \"@/store/index.js\"\r\nimport { itemsService } from \"@/services/ItemsService\"\r\nimport { getRarityFullName } from '@/utils/getRarityFullName'\r\nimport { questService } from \"@/services/QuestService\"\r\nimport { characterService } from \"@/services/CharacterService\"\r\nimport Notify from \"@/utils/Notify\"\r\nimport { spellsService } from \"@/services/SpellsService\"\r\nimport SellShop from \"@/components/SellShop.vue\"\r\nimport GeneralShop from \"@/components/GeneralShop.vue\"\r\nimport MagicShop from \"@/components/MagicShop.vue\"\r\nexport default {\r\n  name: 'MainShop',\r\n  components: {\r\n   SellShop, GeneralShop, MagicShop\r\n  },\r\n  setup(){\r\n    onMounted(async()=> {\r\n      // random chance to get a quest request \r\n      let luck = 1+characterService.getPartyLuck()\r\n      let chance = Math.ceil(Math.random()*25)\r\n      if(luck > chance && !$store.state.player.quest.objective){\r\n        let index = Math.floor(Math.random()*$store.state.quests.length)\r\n        let newQuest = questService.getQuest($store.state.quests[index])\r\n        // TODO make ability to accept up to 3 quests\r\n        if(await Notify.confirm(newQuest.objective, newQuest.target+' | Reward: '+newQuest.reward)){\r\n          $store.state.player.quest = newQuest\r\n        }\r\n      }\r\n      questService.checkQuestProgress()\r\n      $store.state.shopItems = itemsService.getStoreItems()\r\n    })\r\n    const state = reactive({\r\n      playersGold: computed(()=> $store.state.player.gold),\r\n      storeItems: computed(()=> $store.state.shopItems),\r\n      quest: null,\r\n      activeShop: computed(()=> $store.state.shop),\r\n      spellList: computed(()=> spellsService.getRandomSpellList()),\r\n    })\r\n    return state\r\n  },\r\n  methods: {\r\n    getRarityFullName : getRarityFullName\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\nli{\r\n  cursor: pointer;\r\n}\r\n.mh-100{\r\n  height: 75vh;\r\n  overflow-y: auto;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}