{"ast":null,"code":"export const consolePrefix = 'SweetAlert2:';\n/**\n * Filter the unique values into a new array\n * @param arr\n */\n\nexport const uniqueArray = arr => {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n\n  return result;\n};\n/**\n * Capitalize the first letter of a string\n * @param {string} str\n * @returns {string}\n */\n\nexport const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);\n/**\n * @param {NodeList | HTMLCollection | NamedNodeMap} nodeList\n * @returns {array}\n */\n\nexport const toArray = nodeList => Array.prototype.slice.call(nodeList);\n/**\n * Standardize console warnings\n * @param {string | array} message\n */\n\nexport const warn = message => {\n  console.warn(`${consolePrefix} ${typeof message === 'object' ? message.join(' ') : message}`);\n};\n/**\n * Standardize console errors\n * @param {string} message\n */\n\nexport const error = message => {\n  console.error(`${consolePrefix} ${message}`);\n};\n/**\n * Private global state for `warnOnce`\n * @type {Array}\n * @private\n */\n\nconst previousWarnOnceMessages = [];\n/**\n * Show a console warning, but only if it hasn't already been shown\n * @param {string} message\n */\n\nexport const warnOnce = message => {\n  if (!previousWarnOnceMessages.includes(message)) {\n    previousWarnOnceMessages.push(message);\n    warn(message);\n  }\n};\n/**\n * Show a one-time console warning about deprecated params/methods\n */\n\nexport const warnAboutDeprecation = (deprecatedParam, useInstead) => {\n  warnOnce(`\"${deprecatedParam}\" is deprecated and will be removed in the next major release. Please use \"${useInstead}\" instead.`);\n};\n/**\n * If `arg` is a function, call it (with no arguments or context) and return the result.\n * Otherwise, just pass the value through\n * @param arg\n */\n\nexport const callIfFunction = arg => typeof arg === 'function' ? arg() : arg;\nexport const hasToPromiseFn = arg => arg && typeof arg.toPromise === 'function';\nexport const asPromise = arg => hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg);\nexport const isPromise = arg => arg && Promise.resolve(arg) === arg;","map":{"version":3,"sources":["C:/Users/dhild/source/mini-projects/blades-of-desolation/node_modules/sweetalert2/src/utils/utils.js"],"names":["consolePrefix","uniqueArray","arr","result","i","length","indexOf","push","capitalizeFirstLetter","str","charAt","toUpperCase","slice","toArray","nodeList","Array","prototype","call","warn","message","console","join","error","previousWarnOnceMessages","warnOnce","includes","warnAboutDeprecation","deprecatedParam","useInstead","callIfFunction","arg","hasToPromiseFn","toPromise","asPromise","Promise","resolve","isPromise"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,cAAtB;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAIC,GAAD,IAAS;AAClC,QAAMC,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,QAAID,MAAM,CAACG,OAAP,CAAeJ,GAAG,CAACE,CAAD,CAAlB,MAA2B,CAAC,CAAhC,EAAmC;AACjCD,MAAAA,MAAM,CAACI,IAAP,CAAYL,GAAG,CAACE,CAAD,CAAf;AACD;AACF;;AACD,SAAOD,MAAP;AACD,CARM;AAUP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMK,qBAAqB,GAAIC,GAAD,IAASA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAArE;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,OAAO,GAAIC,QAAD,IAAcC,KAAK,CAACC,SAAN,CAAgBJ,KAAhB,CAAsBK,IAAtB,CAA2BH,QAA3B,CAA9B;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMI,IAAI,GAAIC,OAAD,IAAa;AAC/BC,EAAAA,OAAO,CAACF,IAAR,CAAc,GAAElB,aAAc,IAAG,OAAOmB,OAAP,KAAmB,QAAnB,GAA8BA,OAAO,CAACE,IAAR,CAAa,GAAb,CAA9B,GAAkDF,OAAQ,EAA3F;AACD,CAFM;AAIP;AACA;AACA;AACA;;AACA,OAAO,MAAMG,KAAK,GAAIH,OAAD,IAAa;AAChCC,EAAAA,OAAO,CAACE,KAAR,CAAe,GAAEtB,aAAc,IAAGmB,OAAQ,EAA1C;AACD,CAFM;AAIP;AACA;AACA;AACA;AACA;;AACA,MAAMI,wBAAwB,GAAG,EAAjC;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAIL,OAAD,IAAa;AACnC,MAAI,CAACI,wBAAwB,CAACE,QAAzB,CAAkCN,OAAlC,CAAL,EAAiD;AAC/CI,IAAAA,wBAAwB,CAAChB,IAAzB,CAA8BY,OAA9B;AACAD,IAAAA,IAAI,CAACC,OAAD,CAAJ;AACD;AACF,CALM;AAOP;AACA;AACA;;AACA,OAAO,MAAMO,oBAAoB,GAAG,CAACC,eAAD,EAAkBC,UAAlB,KAAiC;AACnEJ,EAAAA,QAAQ,CACL,IAAGG,eAAgB,8EAA6EC,UAAW,YADtG,CAAR;AAGD,CAJM;AAMP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAIC,GAAD,IAAU,OAAOA,GAAP,KAAe,UAAf,GAA4BA,GAAG,EAA/B,GAAoCA,GAArE;AAEP,OAAO,MAAMC,cAAc,GAAID,GAAD,IAASA,GAAG,IAAI,OAAOA,GAAG,CAACE,SAAX,KAAyB,UAAhE;AAEP,OAAO,MAAMC,SAAS,GAAIH,GAAD,IAAUC,cAAc,CAACD,GAAD,CAAd,GAAsBA,GAAG,CAACE,SAAJ,EAAtB,GAAwCE,OAAO,CAACC,OAAR,CAAgBL,GAAhB,CAApE;AAEP,OAAO,MAAMM,SAAS,GAAIN,GAAD,IAASA,GAAG,IAAII,OAAO,CAACC,OAAR,CAAgBL,GAAhB,MAAyBA,GAA3D","sourcesContent":["export const consolePrefix = 'SweetAlert2:'\n\n/**\n * Filter the unique values into a new array\n * @param arr\n */\nexport const uniqueArray = (arr) => {\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i])\n    }\n  }\n  return result\n}\n\n/**\n * Capitalize the first letter of a string\n * @param {string} str\n * @returns {string}\n */\nexport const capitalizeFirstLetter = (str) => str.charAt(0).toUpperCase() + str.slice(1)\n\n/**\n * @param {NodeList | HTMLCollection | NamedNodeMap} nodeList\n * @returns {array}\n */\nexport const toArray = (nodeList) => Array.prototype.slice.call(nodeList)\n\n/**\n * Standardize console warnings\n * @param {string | array} message\n */\nexport const warn = (message) => {\n  console.warn(`${consolePrefix} ${typeof message === 'object' ? message.join(' ') : message}`)\n}\n\n/**\n * Standardize console errors\n * @param {string} message\n */\nexport const error = (message) => {\n  console.error(`${consolePrefix} ${message}`)\n}\n\n/**\n * Private global state for `warnOnce`\n * @type {Array}\n * @private\n */\nconst previousWarnOnceMessages = []\n\n/**\n * Show a console warning, but only if it hasn't already been shown\n * @param {string} message\n */\nexport const warnOnce = (message) => {\n  if (!previousWarnOnceMessages.includes(message)) {\n    previousWarnOnceMessages.push(message)\n    warn(message)\n  }\n}\n\n/**\n * Show a one-time console warning about deprecated params/methods\n */\nexport const warnAboutDeprecation = (deprecatedParam, useInstead) => {\n  warnOnce(\n    `\"${deprecatedParam}\" is deprecated and will be removed in the next major release. Please use \"${useInstead}\" instead.`\n  )\n}\n\n/**\n * If `arg` is a function, call it (with no arguments or context) and return the result.\n * Otherwise, just pass the value through\n * @param arg\n */\nexport const callIfFunction = (arg) => (typeof arg === 'function' ? arg() : arg)\n\nexport const hasToPromiseFn = (arg) => arg && typeof arg.toPromise === 'function'\n\nexport const asPromise = (arg) => (hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg))\n\nexport const isPromise = (arg) => arg && Promise.resolve(arg) === arg\n"]},"metadata":{},"sourceType":"module"}