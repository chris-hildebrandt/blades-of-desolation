{"ast":null,"code":"import _defineProperty from \"C:/Users/dhild/source/mini-projects/blades-of-desolation/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport $store from \"@/store/index\";\nimport { Ability } from \"@/models/Ability\";\nimport { battleService } from \"./BattleService\";\nimport { useToast } from \"vue-toastification\";\n\nclass AbilitiesService {\n  constructor() {\n    _defineProperty(this, \"toast\", useToast());\n  }\n\n  learnAbility(abilityName, character) {\n    if (!this.canLearnAbility(abilityName, character)) {\n      return false;\n    }\n\n    if (character.abilities.find(a => a.name == abilityName)) {\n      this.levelUpAbility(abilityName, character);\n      return;\n    }\n\n    let abilityData = $store.state.abilities.find(a => a.name == abilityName);\n    character.abilities.push(new Ability(abilityData));\n    this.toast.success(character.name + ' Learned ' + abilityName, {\n      timeout: 10000\n    });\n  }\n\n  canLearnAbility(abilityName, character) {\n    let ability = character.abilities.find(a => a.name == abilityName);\n\n    if (!ability) {\n      ability = $store.state.abilities.find(a => a.name == abilityName);\n    } else {\n      return ability.level < character.level;\n    }\n\n    if (character.classType != ability.classType) {\n      return false;\n    }\n\n    return ability.level <= character.level;\n  }\n\n  levelUpAbility(abilityName, character) {\n    let ability = character.abilities.find(a => a.name == abilityName);\n    let originalAbility = $store.state.abilities.find(a => a.name == abilityName);\n\n    if (ability.level % 2 == 0) {\n      ability.value.forEach((v, i) => v += originalAbility.value[i]);\n    }\n\n    ability.baseUses++;\n    ability.uses++;\n    ability.level++;\n    this.toast.success(character.name + ' Level up ' + abilityName, {\n      timeout: 10000\n    });\n  }\n\n  useAbility(Ability, target) {\n    let ability = { ...Ability\n    };\n\n    if (ability.uses <= 0) {\n      return;\n    }\n\n    if (ability.areaEffect) {\n      if (target == 'enemies') {\n        $store.state.combatMonsters.forEach(m => {\n          ability['areaEffect'] = false;\n          this.useAbility(ability, m);\n        });\n      } else {\n        $store.state.player.characters.forEach(c => {\n          ability['areaEffect'] = false;\n          this.useAbility(ability, c);\n        });\n      }\n\n      return;\n    }\n\n    if (ability.strength && !ability.buff && !ability.debuff) {\n      ability['actions'] = 1;\n      ability['hp'] = 1;\n      ability['lifeSteal'] = 0;\n      ability['luck'] = 0;\n      ability['speed'] = ability['speed'] ?? 1;\n      ability['isSpell'] = true;\n      battleService.handleAttack(ability, target);\n    }\n\n    if (ability.effect) {\n      // TODO refactor all effect/value pairs, instead do arrayEffects, stringEffects, numEffects USE-> key: value pairs\n      // ex. numEffect: {hp: 5}, arrayEffect: {resistence: cold}, stringEffect: {dmgType: necrotic}\n      ability.effect.forEach(function (e, i) {\n        if (Array.isArray(target[e])) {\n          target[e].push(ability.value[i]);\n        } else if (typeof ability.value[i] !== 'number') {\n          target[e] = ability.value[i];\n        } else {\n          if (ability.buff) {\n            target[e] += ability.value[i];\n          } else {\n            target[e] -= ability.value[i];\n          }\n        }\n      });\n    }\n\n    if (ability.temp) {\n      if (ability.debuff) {\n        ability.effect.forEach(function (e, i) {\n          target['debuffs'].push({\n            effect: e,\n            value: ability.value[i]\n          });\n        });\n      }\n\n      if (ability.buff) {\n        ability.effect.forEach(function (e, i) {\n          target['buffs'].push({\n            effect: e,\n            value: ability.value[i]\n          });\n        });\n      }\n    }\n  }\n\n}\n\nexport const abilitiesService = new AbilitiesService();","map":{"version":3,"sources":["C:/Users/dhild/source/mini-projects/blades-of-desolation/src/services/AbilitiesService.js"],"names":["$store","Ability","battleService","useToast","AbilitiesService","learnAbility","abilityName","character","canLearnAbility","abilities","find","a","name","levelUpAbility","abilityData","state","push","toast","success","timeout","ability","level","classType","originalAbility","value","forEach","v","i","baseUses","uses","useAbility","target","areaEffect","combatMonsters","m","player","characters","c","strength","buff","debuff","handleAttack","effect","e","Array","isArray","temp","abilitiesService"],"mappings":"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","sourcesContent":["import $store from \"@/store/index\"\r\nimport { Ability } from \"@/models/Ability\"\r\nimport { battleService } from \"./BattleService\"\r\nimport { useToast } from \"vue-toastification\"\r\n\r\nclass AbilitiesService{\r\n  toast = useToast()\r\n\r\n  learnAbility(abilityName, character){\r\n    if(!this.canLearnAbility(abilityName, character)){\r\n      return false\r\n    }\r\n    if(character.abilities.find(a => a.name == abilityName)){\r\n      this.levelUpAbility(abilityName, character)\r\n      return\r\n    }\r\n    let abilityData = $store.state.abilities.find(a => a.name == abilityName)\r\n    character.abilities.push(new Ability(abilityData))\r\n    this.toast.success(character.name+' Learned '+abilityName, {timeout: 10000})\r\n  }\r\n  canLearnAbility(abilityName, character){\r\n    let ability = character.abilities.find(a => a.name == abilityName)\r\n    if(!ability){\r\n      ability = $store.state.abilities.find(a => a.name == abilityName)\r\n    }else{\r\n      return ability.level < character.level\r\n    }\r\n    if(character.classType != ability.classType){\r\n      return false\r\n    }\r\n    return ability.level <= character.level\r\n  }\r\n  levelUpAbility(abilityName, character){\r\n    let ability = character.abilities.find(a => a.name == abilityName)\r\n    let originalAbility = $store.state.abilities.find(a => a.name == abilityName)\r\n\r\n    if(ability.level % 2 == 0){\r\n      ability.value.forEach((v, i)=> v += originalAbility.value[i])\r\n    }\r\n    ability.baseUses++\r\n    ability.uses++\r\n    ability.level++\r\n    this.toast.success(character.name+' Level up '+abilityName, {timeout: 10000})\r\n  }\r\n  useAbility(Ability, target){\r\n    let ability = {...Ability}\r\n    if(ability.uses <= 0){\r\n      return\r\n    }\r\n    if(ability.areaEffect){\r\n      if(target == 'enemies'){\r\n        $store.state.combatMonsters.forEach(m => {\r\n          ability['areaEffect'] = false\r\n          this.useAbility(ability, m)\r\n        })\r\n      }else{\r\n        $store.state.player.characters.forEach(c => {\r\n          ability['areaEffect'] = false\r\n          this.useAbility(ability, c)\r\n        })\r\n      }\r\n      return\r\n    }\r\n    if(ability.strength && (!ability.buff && !ability.debuff)){\r\n      ability['actions'] = 1\r\n      ability['hp'] = 1\r\n      ability['lifeSteal'] = 0\r\n      ability['luck'] = 0\r\n      ability['speed'] = ability['speed'] ?? 1\r\n      ability['isSpell'] = true\r\n      battleService.handleAttack(ability, target)\r\n    }\r\n    if(ability.effect){\r\n      // TODO refactor all effect/value pairs, instead do arrayEffects, stringEffects, numEffects USE-> key: value pairs\r\n      // ex. numEffect: {hp: 5}, arrayEffect: {resistence: cold}, stringEffect: {dmgType: necrotic}\r\n      ability.effect.forEach(function(e, i){\r\n        if(Array.isArray(target[e])){\r\n          target[e].push(ability.value[i])\r\n        }else if(typeof ability.value[i] !== 'number'){\r\n          target[e] = ability.value[i]\r\n        }else{\r\n          if(ability.buff){\r\n            target[e] += ability.value[i]\r\n          }else{\r\n            target[e] -= ability.value[i]\r\n          }\r\n        }\r\n      })\r\n    }\r\n    if(ability.temp){\r\n      if(ability.debuff){\r\n        ability.effect.forEach(function(e, i){\r\n          target['debuffs'].push({effect: e, value: ability.value[i]})\r\n        })\r\n      }\r\n      if(ability.buff){\r\n        ability.effect.forEach(function(e, i){\r\n          target['buffs'].push({effect: e, value: ability.value[i]})\r\n        })\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const abilitiesService = new AbilitiesService()"]},"metadata":{},"sourceType":"module"}