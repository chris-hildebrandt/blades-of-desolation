{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-078ea364\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = [\"id\"];\nconst _hoisted_2 = [\"id\", \"src\"];\nconst _hoisted_3 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_HpBar = _resolveComponent(\"HpBar\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_HpBar, {\n    hp: $props.monster.hp,\n    baseHp: $props.monster.baseHp,\n    unknown: _ctx.unknown\n  }, null, 8, [\"hp\", \"baseHp\", \"unknown\"]), _createElementVNode(\"div\", null, [_createElementVNode(\"div\", {\n    class: \"position-absolute hit\",\n    id: 'hit' + $props.monster.id\n  }, null, 8, _hoisted_1), $props.monster.hp > 0 ? (_openBlock(), _createElementBlock(\"img\", {\n    key: 0,\n    id: 'monster' + $props.monster.id,\n    class: _normalizeClass([\"img-fluid monster-img attack-cursor\", $props.monster.statusEffects.map(e => e.negative ? e.name : '').join(' ')]),\n    onClick: _cache[0] || (_cache[0] = $event => $options.attackMonster($props.monster)),\n    src: _ctx.img\n  }, null, 10, _hoisted_2)) : (_openBlock(), _createElementBlock(\"img\", {\n    key: 1,\n    class: \"img-fluid monster-img\",\n    src: _ctx.deadImg\n  }, null, 8, _hoisted_3))])], 64);\n}","map":{"version":3,"mappings":";;;;;;;;;;6DACEA,aAAsEC,gBAAtE,EAAsE;AAA9DC,MAAE,EAAEC,eAAQD,EAAkD;AAA7CE,UAAM,EAAED,eAAQC,MAA6B;AAApBC,WAAO,EAAEC;AAAW,GAAtE,yCACFC,oBAIM,KAJN,EAIM,IAJN,EAIM,CAHJA,oBAAgE,KAAhE,EAAgE;AAA3DC,SAAK,EAAC,uBAAqD;AAA5BC,MAAE,UAAQN,eAAQM;AAAU,GAAhE,sBAGI,EAFkCN,eAAQD,EAAR,GAAU,mBAAhDQ,oBAA2N,KAA3N,EAA2N;UAAA;AAArND,MAAE,cAAYN,eAAQM,EAA+L;AAArKD,SAAK,mBAAC,qCAAD,EAA+CL,eAAQQ,aAAR,CAAsBC,GAAtB,CAA0BC,CAAC,IAAIA,CAAC,CAACC,QAAF,GAAaD,CAAC,CAACE,IAAf,GAAmB,EAAlD,EAAyDC,IAAzD,CAA6D,GAA7D,CAA/C,EAAgK;AAA5CC,WAAK,sCAAEC,uBAAcf,cAAd,CAAF,CAAuC;AAAZgB,OAAG,EAAEb;AAAO,GAA3N,0CACAI,oBAA2D,KAA3D,EAA2D;UAAA;AAA/CF,SAAK,EAAC,uBAAyC;AAAhBW,OAAG,EAAEb;AAAW,GAA3D,uBACI,CAJN","names":["_createVNode","_component_HpBar","hp","$props","baseHp","unknown","_ctx","_createElementVNode","class","id","_createElementBlock","statusEffects","map","e","negative","name","join","onClick","$options","src"],"sourceRoot":"","sources":["C:\\Users\\dhild\\source\\mini-projects\\blades-of-desolation\\src\\components\\Monster.vue"],"sourcesContent":["<template>\r\n  <HpBar :hp=\"monster.hp\" :baseHp=\"monster.baseHp\" :unknown=\"unknown\" />\r\n<div>\r\n  <div class=\"position-absolute hit\" :id=\"'hit'+monster.id\"></div>\r\n  <img :id=\"'monster'+monster.id\" v-if=\"monster.hp > 0\" class=\"img-fluid monster-img attack-cursor\" :class=\"monster.statusEffects.map(e => e.negative ? e.name : '').join(' ')\" @click=\"attackMonster(monster)\" :src=\"img\" />\r\n  <img v-else class=\"img-fluid monster-img\" :src=\"deadImg\" />\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport { reactive } from \"@vue/reactivity\"\r\nimport HpBar from \"./HpBar.vue\"\r\nimport $store from '../store/index.js'\r\nimport { battleService } from \"@/services/BattleService\"\r\nimport { characterService } from \"@/services/CharacterService\"\r\nimport { computed, onMounted } from \"@vue/runtime-core\"\r\nimport 'animate.css'\r\nimport { animationsService } from \"@/services/AnimationsService\"\r\n\r\nexport default {\r\n  components: { HpBar },\r\n  name: 'EnemyMonster',\r\n  props: {\r\n    monster: {type: Object}\r\n  },\r\n  setup(props){\r\n    onMounted(()=> {\r\n        state.monsterPreHp = props.monster.hp\r\n        characterService.autoSelect()\r\n      })\r\n    const state = reactive({\r\n      deadImg: '../assets/img/dead.png',\r\n      unknown: computed(()=>!$store.state.player.kills[props.monster.name]),\r\n      img: computed(()=>$store.state.monsterImgList.find(m => m.includes(props.monster.img)) ?? props.monster.img)\r\n    })\r\n    return state\r\n  },\r\n  methods: {\r\n    attackMonster(monster){\r\n      characterService.autoSelect()\r\n      animationsService.shake('monster'+monster.id)\r\n      battleService.handleAttack(this.$store.state.selected, monster)\r\n      characterService.autoSelect()\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.monster-img{\r\n  height: 20vh;\r\n}\r\n.hit{\r\n  left: 75%\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}