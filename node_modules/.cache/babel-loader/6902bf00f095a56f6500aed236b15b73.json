{"ast":null,"code":"import { setInnerHtml } from './domUtils.js';\n/**\n * @param {HTMLElement | object | string} param\n * @param {HTMLElement} target\n */\n\nexport const parseHtmlToContainer = (param, target) => {\n  // DOM element\n  if (param instanceof HTMLElement) {\n    target.appendChild(param);\n  } // Object\n  else if (typeof param === 'object') {\n    handleObject(param, target);\n  } // Plain string\n  else if (param) {\n    setInnerHtml(target, param);\n  }\n};\n/**\n * @param {object} param\n * @param {HTMLElement} target\n */\n\nconst handleObject = (param, target) => {\n  // JQuery element(s)\n  if (param.jquery) {\n    handleJqueryElem(target, param);\n  } // For other objects use their string representation\n  else {\n    setInnerHtml(target, param.toString());\n  }\n};\n\nconst handleJqueryElem = (target, elem) => {\n  target.textContent = '';\n\n  if (0 in elem) {\n    for (let i = 0; (i in elem); i++) {\n      target.appendChild(elem[i].cloneNode(true));\n    }\n  } else {\n    target.appendChild(elem.cloneNode(true));\n  }\n};","map":{"version":3,"sources":["C:/Users/dhild/source/mini-projects/blades-of-desolation/node_modules/sweetalert2/src/utils/dom/parseHtmlToContainer.js"],"names":["setInnerHtml","parseHtmlToContainer","param","target","HTMLElement","appendChild","handleObject","jquery","handleJqueryElem","toString","elem","textContent","i","cloneNode"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrD;AACA,MAAID,KAAK,YAAYE,WAArB,EAAkC;AAChCD,IAAAA,MAAM,CAACE,WAAP,CAAmBH,KAAnB;AACD,GAFD,CAIA;AAJA,OAKK,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAClCI,IAAAA,YAAY,CAACJ,KAAD,EAAQC,MAAR,CAAZ;AACD,GAFI,CAIL;AAJK,OAKA,IAAID,KAAJ,EAAW;AACdF,IAAAA,YAAY,CAACG,MAAD,EAASD,KAAT,CAAZ;AACD;AACF,CAfM;AAiBP;AACA;AACA;AACA;;AACA,MAAMI,YAAY,GAAG,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACtC;AACA,MAAID,KAAK,CAACK,MAAV,EAAkB;AAChBC,IAAAA,gBAAgB,CAACL,MAAD,EAASD,KAAT,CAAhB;AACD,GAFD,CAIA;AAJA,OAKK;AACHF,IAAAA,YAAY,CAACG,MAAD,EAASD,KAAK,CAACO,QAAN,EAAT,CAAZ;AACD;AACF,CAVD;;AAYA,MAAMD,gBAAgB,GAAG,CAACL,MAAD,EAASO,IAAT,KAAkB;AACzCP,EAAAA,MAAM,CAACQ,WAAP,GAAqB,EAArB;;AACA,MAAI,KAAKD,IAAT,EAAe;AACb,SAAK,IAAIE,CAAC,GAAG,CAAb,GAAgBA,CAAC,IAAIF,IAArB,GAA2BE,CAAC,EAA5B,EAAgC;AAC9BT,MAAAA,MAAM,CAACE,WAAP,CAAmBK,IAAI,CAACE,CAAD,CAAJ,CAAQC,SAAR,CAAkB,IAAlB,CAAnB;AACD;AACF,GAJD,MAIO;AACLV,IAAAA,MAAM,CAACE,WAAP,CAAmBK,IAAI,CAACG,SAAL,CAAe,IAAf,CAAnB;AACD;AACF,CATD","sourcesContent":["import { setInnerHtml } from './domUtils.js'\n\n/**\n * @param {HTMLElement | object | string} param\n * @param {HTMLElement} target\n */\nexport const parseHtmlToContainer = (param, target) => {\n  // DOM element\n  if (param instanceof HTMLElement) {\n    target.appendChild(param)\n  }\n\n  // Object\n  else if (typeof param === 'object') {\n    handleObject(param, target)\n  }\n\n  // Plain string\n  else if (param) {\n    setInnerHtml(target, param)\n  }\n}\n\n/**\n * @param {object} param\n * @param {HTMLElement} target\n */\nconst handleObject = (param, target) => {\n  // JQuery element(s)\n  if (param.jquery) {\n    handleJqueryElem(target, param)\n  }\n\n  // For other objects use their string representation\n  else {\n    setInnerHtml(target, param.toString())\n  }\n}\n\nconst handleJqueryElem = (target, elem) => {\n  target.textContent = ''\n  if (0 in elem) {\n    for (let i = 0; i in elem; i++) {\n      target.appendChild(elem[i].cloneNode(true))\n    }\n  } else {\n    target.appendChild(elem.cloneNode(true))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}