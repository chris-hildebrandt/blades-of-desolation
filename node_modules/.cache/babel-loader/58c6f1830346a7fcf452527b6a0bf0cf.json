{"ast":null,"code":"import { iconTypes, swalClasses } from '../../classes.js';\nimport { error } from '../../utils.js';\nimport * as dom from '../../dom/index.js';\nimport privateProps from '../../../privateProps.js';\nexport const renderIcon = (instance, params) => {\n  const innerParams = privateProps.innerParams.get(instance);\n  const icon = dom.getIcon(); // if the given icon already rendered, apply the styling without re-rendering the icon\n\n  if (innerParams && params.icon === innerParams.icon) {\n    // Custom or default content\n    setContent(icon, params);\n    applyStyles(icon, params);\n    return;\n  }\n\n  if (!params.icon && !params.iconHtml) {\n    return dom.hide(icon);\n  }\n\n  if (params.icon && Object.keys(iconTypes).indexOf(params.icon) === -1) {\n    error(`Unknown icon! Expected \"success\", \"error\", \"warning\", \"info\" or \"question\", got \"${params.icon}\"`);\n    return dom.hide(icon);\n  }\n\n  dom.show(icon); // Custom or default content\n\n  setContent(icon, params);\n  applyStyles(icon, params); // Animate icon\n\n  dom.addClass(icon, params.showClass.icon);\n};\n\nconst applyStyles = (icon, params) => {\n  for (const iconType in iconTypes) {\n    if (params.icon !== iconType) {\n      dom.removeClass(icon, iconTypes[iconType]);\n    }\n  }\n\n  dom.addClass(icon, iconTypes[params.icon]); // Icon color\n\n  setColor(icon, params); // Success icon background color\n\n  adjustSuccessIconBackgroundColor(); // Custom class\n\n  dom.applyCustomClass(icon, params, 'icon');\n}; // Adjust success icon background color to match the popup background color\n\n\nconst adjustSuccessIconBackgroundColor = () => {\n  const popup = dom.getPopup();\n  const popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color');\n  const successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');\n\n  for (let i = 0; i < successIconParts.length; i++) {\n    successIconParts[i].style.backgroundColor = popupBackgroundColor;\n  }\n};\n\nconst successIconHtml = `\n  <div class=\"swal2-success-circular-line-left\"></div>\n  <span class=\"swal2-success-line-tip\"></span> <span class=\"swal2-success-line-long\"></span>\n  <div class=\"swal2-success-ring\"></div> <div class=\"swal2-success-fix\"></div>\n  <div class=\"swal2-success-circular-line-right\"></div>\n`;\nconst errorIconHtml = `\n  <span class=\"swal2-x-mark\">\n    <span class=\"swal2-x-mark-line-left\"></span>\n    <span class=\"swal2-x-mark-line-right\"></span>\n  </span>\n`;\n\nconst setContent = (icon, params) => {\n  icon.textContent = '';\n\n  if (params.iconHtml) {\n    dom.setInnerHtml(icon, iconContent(params.iconHtml));\n  } else if (params.icon === 'success') {\n    dom.setInnerHtml(icon, successIconHtml);\n  } else if (params.icon === 'error') {\n    dom.setInnerHtml(icon, errorIconHtml);\n  } else {\n    const defaultIconHtml = {\n      question: '?',\n      warning: '!',\n      info: 'i'\n    };\n    dom.setInnerHtml(icon, iconContent(defaultIconHtml[params.icon]));\n  }\n};\n\nconst setColor = (icon, params) => {\n  if (!params.iconColor) {\n    return;\n  }\n\n  icon.style.color = params.iconColor;\n  icon.style.borderColor = params.iconColor;\n\n  for (const sel of ['.swal2-success-line-tip', '.swal2-success-line-long', '.swal2-x-mark-line-left', '.swal2-x-mark-line-right']) {\n    dom.setStyle(icon, sel, 'backgroundColor', params.iconColor);\n  }\n\n  dom.setStyle(icon, '.swal2-success-ring', 'borderColor', params.iconColor);\n};\n\nconst iconContent = content => `<div class=\"${swalClasses['icon-content']}\">${content}</div>`;","map":{"version":3,"sources":["C:/Users/dhild/source/mini-projects/blades-of-desolation/node_modules/sweetalert2/src/utils/dom/renderers/renderIcon.js"],"names":["iconTypes","swalClasses","error","dom","privateProps","renderIcon","instance","params","innerParams","get","icon","getIcon","setContent","applyStyles","iconHtml","hide","Object","keys","indexOf","show","addClass","showClass","iconType","removeClass","setColor","adjustSuccessIconBackgroundColor","applyCustomClass","popup","getPopup","popupBackgroundColor","window","getComputedStyle","getPropertyValue","successIconParts","querySelectorAll","i","length","style","backgroundColor","successIconHtml","errorIconHtml","textContent","setInnerHtml","iconContent","defaultIconHtml","question","warning","info","iconColor","color","borderColor","sel","setStyle","content"],"mappings":"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","sourcesContent":["import { iconTypes, swalClasses } from '../../classes.js'\nimport { error } from '../../utils.js'\nimport * as dom from '../../dom/index.js'\nimport privateProps from '../../../privateProps.js'\n\nexport const renderIcon = (instance, params) => {\n  const innerParams = privateProps.innerParams.get(instance)\n  const icon = dom.getIcon()\n\n  // if the given icon already rendered, apply the styling without re-rendering the icon\n  if (innerParams && params.icon === innerParams.icon) {\n    // Custom or default content\n    setContent(icon, params)\n\n    applyStyles(icon, params)\n    return\n  }\n\n  if (!params.icon && !params.iconHtml) {\n    return dom.hide(icon)\n  }\n\n  if (params.icon && Object.keys(iconTypes).indexOf(params.icon) === -1) {\n    error(`Unknown icon! Expected \"success\", \"error\", \"warning\", \"info\" or \"question\", got \"${params.icon}\"`)\n    return dom.hide(icon)\n  }\n\n  dom.show(icon)\n\n  // Custom or default content\n  setContent(icon, params)\n\n  applyStyles(icon, params)\n\n  // Animate icon\n  dom.addClass(icon, params.showClass.icon)\n}\n\nconst applyStyles = (icon, params) => {\n  for (const iconType in iconTypes) {\n    if (params.icon !== iconType) {\n      dom.removeClass(icon, iconTypes[iconType])\n    }\n  }\n  dom.addClass(icon, iconTypes[params.icon])\n\n  // Icon color\n  setColor(icon, params)\n\n  // Success icon background color\n  adjustSuccessIconBackgroundColor()\n\n  // Custom class\n  dom.applyCustomClass(icon, params, 'icon')\n}\n\n// Adjust success icon background color to match the popup background color\nconst adjustSuccessIconBackgroundColor = () => {\n  const popup = dom.getPopup()\n  const popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color')\n  const successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix')\n  for (let i = 0; i < successIconParts.length; i++) {\n    successIconParts[i].style.backgroundColor = popupBackgroundColor\n  }\n}\n\nconst successIconHtml = `\n  <div class=\"swal2-success-circular-line-left\"></div>\n  <span class=\"swal2-success-line-tip\"></span> <span class=\"swal2-success-line-long\"></span>\n  <div class=\"swal2-success-ring\"></div> <div class=\"swal2-success-fix\"></div>\n  <div class=\"swal2-success-circular-line-right\"></div>\n`\n\nconst errorIconHtml = `\n  <span class=\"swal2-x-mark\">\n    <span class=\"swal2-x-mark-line-left\"></span>\n    <span class=\"swal2-x-mark-line-right\"></span>\n  </span>\n`\n\nconst setContent = (icon, params) => {\n  icon.textContent = ''\n\n  if (params.iconHtml) {\n    dom.setInnerHtml(icon, iconContent(params.iconHtml))\n  } else if (params.icon === 'success') {\n    dom.setInnerHtml(icon, successIconHtml)\n  } else if (params.icon === 'error') {\n    dom.setInnerHtml(icon, errorIconHtml)\n  } else {\n    const defaultIconHtml = {\n      question: '?',\n      warning: '!',\n      info: 'i',\n    }\n    dom.setInnerHtml(icon, iconContent(defaultIconHtml[params.icon]))\n  }\n}\n\nconst setColor = (icon, params) => {\n  if (!params.iconColor) {\n    return\n  }\n  icon.style.color = params.iconColor\n  icon.style.borderColor = params.iconColor\n  for (const sel of [\n    '.swal2-success-line-tip',\n    '.swal2-success-line-long',\n    '.swal2-x-mark-line-left',\n    '.swal2-x-mark-line-right',\n  ]) {\n    dom.setStyle(icon, sel, 'backgroundColor', params.iconColor)\n  }\n  dom.setStyle(icon, '.swal2-success-ring', 'borderColor', params.iconColor)\n}\n\nconst iconContent = (content) => `<div class=\"${swalClasses['icon-content']}\">${content}</div>`\n"]},"metadata":{},"sourceType":"module"}