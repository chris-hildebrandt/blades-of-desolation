{"ast":null,"code":"import defaultParams from './params.js';\nimport { capitalizeFirstLetter, toArray, warn } from './utils.js';\nconst swalStringParams = ['swal-title', 'swal-html', 'swal-footer'];\nexport const getTemplateParams = params => {\n  const template = typeof params.template === 'string' ? document.querySelector(params.template) : params.template;\n\n  if (!template) {\n    return {};\n  }\n  /** @type {DocumentFragment} */\n\n\n  const templateContent = template.content;\n  showWarningsForElements(templateContent);\n  const result = Object.assign(getSwalParams(templateContent), getSwalButtons(templateContent), getSwalImage(templateContent), getSwalIcon(templateContent), getSwalInput(templateContent), getSwalStringParams(templateContent, swalStringParams));\n  return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n */\n\nconst getSwalParams = templateContent => {\n  const result = {};\n  toArray(templateContent.querySelectorAll('swal-param')).forEach(param => {\n    showWarningsForAttributes(param, ['name', 'value']);\n    const paramName = param.getAttribute('name');\n    const value = param.getAttribute('value');\n\n    if (typeof defaultParams[paramName] === 'boolean' && value === 'false') {\n      result[paramName] = false;\n    }\n\n    if (typeof defaultParams[paramName] === 'object') {\n      result[paramName] = JSON.parse(value);\n    }\n  });\n  return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n */\n\n\nconst getSwalButtons = templateContent => {\n  const result = {};\n  toArray(templateContent.querySelectorAll('swal-button')).forEach(button => {\n    showWarningsForAttributes(button, ['type', 'color', 'aria-label']);\n    const type = button.getAttribute('type');\n    result[`${type}ButtonText`] = button.innerHTML;\n    result[`show${capitalizeFirstLetter(type)}Button`] = true;\n\n    if (button.hasAttribute('color')) {\n      result[`${type}ButtonColor`] = button.getAttribute('color');\n    }\n\n    if (button.hasAttribute('aria-label')) {\n      result[`${type}ButtonAriaLabel`] = button.getAttribute('aria-label');\n    }\n  });\n  return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n */\n\n\nconst getSwalImage = templateContent => {\n  const result = {};\n  /** @type {HTMLElement} */\n\n  const image = templateContent.querySelector('swal-image');\n\n  if (image) {\n    showWarningsForAttributes(image, ['src', 'width', 'height', 'alt']);\n\n    if (image.hasAttribute('src')) {\n      result.imageUrl = image.getAttribute('src');\n    }\n\n    if (image.hasAttribute('width')) {\n      result.imageWidth = image.getAttribute('width');\n    }\n\n    if (image.hasAttribute('height')) {\n      result.imageHeight = image.getAttribute('height');\n    }\n\n    if (image.hasAttribute('alt')) {\n      result.imageAlt = image.getAttribute('alt');\n    }\n  }\n\n  return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n */\n\n\nconst getSwalIcon = templateContent => {\n  const result = {};\n  /** @type {HTMLElement} */\n\n  const icon = templateContent.querySelector('swal-icon');\n\n  if (icon) {\n    showWarningsForAttributes(icon, ['type', 'color']);\n\n    if (icon.hasAttribute('type')) {\n      result.icon = icon.getAttribute('type');\n    }\n\n    if (icon.hasAttribute('color')) {\n      result.iconColor = icon.getAttribute('color');\n    }\n\n    result.iconHtml = icon.innerHTML;\n  }\n\n  return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n */\n\n\nconst getSwalInput = templateContent => {\n  const result = {};\n  /** @type {HTMLElement} */\n\n  const input = templateContent.querySelector('swal-input');\n\n  if (input) {\n    showWarningsForAttributes(input, ['type', 'label', 'placeholder', 'value']);\n    result.input = input.getAttribute('type') || 'text';\n\n    if (input.hasAttribute('label')) {\n      result.inputLabel = input.getAttribute('label');\n    }\n\n    if (input.hasAttribute('placeholder')) {\n      result.inputPlaceholder = input.getAttribute('placeholder');\n    }\n\n    if (input.hasAttribute('value')) {\n      result.inputValue = input.getAttribute('value');\n    }\n  }\n\n  const inputOptions = templateContent.querySelectorAll('swal-input-option');\n\n  if (inputOptions.length) {\n    result.inputOptions = {};\n    toArray(inputOptions).forEach(option => {\n      showWarningsForAttributes(option, ['value']);\n      const optionValue = option.getAttribute('value');\n      const optionName = option.innerHTML;\n      result.inputOptions[optionValue] = optionName;\n    });\n  }\n\n  return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n * @param {string[]} paramNames\n */\n\n\nconst getSwalStringParams = (templateContent, paramNames) => {\n  const result = {};\n\n  for (const i in paramNames) {\n    const paramName = paramNames[i];\n    /** @type {HTMLElement} */\n\n    const tag = templateContent.querySelector(paramName);\n\n    if (tag) {\n      showWarningsForAttributes(tag, []);\n      result[paramName.replace(/^swal-/, '')] = tag.innerHTML.trim();\n    }\n  }\n\n  return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n */\n\n\nconst showWarningsForElements = templateContent => {\n  const allowedElements = swalStringParams.concat(['swal-param', 'swal-button', 'swal-image', 'swal-icon', 'swal-input', 'swal-input-option']);\n  toArray(templateContent.children).forEach(el => {\n    const tagName = el.tagName.toLowerCase();\n\n    if (allowedElements.indexOf(tagName) === -1) {\n      warn(`Unrecognized element <${tagName}>`);\n    }\n  });\n};\n/**\n * @param {HTMLElement} el\n * @param {string[]} allowedAttributes\n */\n\n\nconst showWarningsForAttributes = (el, allowedAttributes) => {\n  toArray(el.attributes).forEach(attribute => {\n    if (allowedAttributes.indexOf(attribute.name) === -1) {\n      warn([`Unrecognized attribute \"${attribute.name}\" on <${el.tagName.toLowerCase()}>.`, `${allowedAttributes.length ? `Allowed attributes are: ${allowedAttributes.join(', ')}` : 'To set the value, use HTML within the element.'}`]);\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/dhild/source/mini-projects/blades-of-desolation/node_modules/sweetalert2/src/utils/getTemplateParams.js"],"names":["defaultParams","capitalizeFirstLetter","toArray","warn","swalStringParams","getTemplateParams","params","template","document","querySelector","templateContent","content","showWarningsForElements","result","Object","assign","getSwalParams","getSwalButtons","getSwalImage","getSwalIcon","getSwalInput","getSwalStringParams","querySelectorAll","forEach","param","showWarningsForAttributes","paramName","getAttribute","value","JSON","parse","button","type","innerHTML","hasAttribute","image","imageUrl","imageWidth","imageHeight","imageAlt","icon","iconColor","iconHtml","input","inputLabel","inputPlaceholder","inputValue","inputOptions","length","option","optionValue","optionName","paramNames","i","tag","replace","trim","allowedElements","concat","children","el","tagName","toLowerCase","indexOf","allowedAttributes","attributes","attribute","name","join"],"mappings":"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","sourcesContent":["import defaultParams from './params.js'\nimport { capitalizeFirstLetter, toArray, warn } from './utils.js'\n\nconst swalStringParams = ['swal-title', 'swal-html', 'swal-footer']\n\nexport const getTemplateParams = (params) => {\n  const template = typeof params.template === 'string' ? document.querySelector(params.template) : params.template\n  if (!template) {\n    return {}\n  }\n  /** @type {DocumentFragment} */\n  const templateContent = template.content\n\n  showWarningsForElements(templateContent)\n\n  const result = Object.assign(\n    getSwalParams(templateContent),\n    getSwalButtons(templateContent),\n    getSwalImage(templateContent),\n    getSwalIcon(templateContent),\n    getSwalInput(templateContent),\n    getSwalStringParams(templateContent, swalStringParams)\n  )\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n */\nconst getSwalParams = (templateContent) => {\n  const result = {}\n  toArray(templateContent.querySelectorAll('swal-param')).forEach((param) => {\n    showWarningsForAttributes(param, ['name', 'value'])\n    const paramName = param.getAttribute('name')\n    const value = param.getAttribute('value')\n    if (typeof defaultParams[paramName] === 'boolean' && value === 'false') {\n      result[paramName] = false\n    }\n    if (typeof defaultParams[paramName] === 'object') {\n      result[paramName] = JSON.parse(value)\n    }\n  })\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n */\nconst getSwalButtons = (templateContent) => {\n  const result = {}\n  toArray(templateContent.querySelectorAll('swal-button')).forEach((button) => {\n    showWarningsForAttributes(button, ['type', 'color', 'aria-label'])\n    const type = button.getAttribute('type')\n    result[`${type}ButtonText`] = button.innerHTML\n    result[`show${capitalizeFirstLetter(type)}Button`] = true\n    if (button.hasAttribute('color')) {\n      result[`${type}ButtonColor`] = button.getAttribute('color')\n    }\n    if (button.hasAttribute('aria-label')) {\n      result[`${type}ButtonAriaLabel`] = button.getAttribute('aria-label')\n    }\n  })\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n */\nconst getSwalImage = (templateContent) => {\n  const result = {}\n  /** @type {HTMLElement} */\n  const image = templateContent.querySelector('swal-image')\n  if (image) {\n    showWarningsForAttributes(image, ['src', 'width', 'height', 'alt'])\n    if (image.hasAttribute('src')) {\n      result.imageUrl = image.getAttribute('src')\n    }\n    if (image.hasAttribute('width')) {\n      result.imageWidth = image.getAttribute('width')\n    }\n    if (image.hasAttribute('height')) {\n      result.imageHeight = image.getAttribute('height')\n    }\n    if (image.hasAttribute('alt')) {\n      result.imageAlt = image.getAttribute('alt')\n    }\n  }\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n */\nconst getSwalIcon = (templateContent) => {\n  const result = {}\n  /** @type {HTMLElement} */\n  const icon = templateContent.querySelector('swal-icon')\n  if (icon) {\n    showWarningsForAttributes(icon, ['type', 'color'])\n    if (icon.hasAttribute('type')) {\n      result.icon = icon.getAttribute('type')\n    }\n    if (icon.hasAttribute('color')) {\n      result.iconColor = icon.getAttribute('color')\n    }\n    result.iconHtml = icon.innerHTML\n  }\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n */\nconst getSwalInput = (templateContent) => {\n  const result = {}\n  /** @type {HTMLElement} */\n  const input = templateContent.querySelector('swal-input')\n  if (input) {\n    showWarningsForAttributes(input, ['type', 'label', 'placeholder', 'value'])\n    result.input = input.getAttribute('type') || 'text'\n    if (input.hasAttribute('label')) {\n      result.inputLabel = input.getAttribute('label')\n    }\n    if (input.hasAttribute('placeholder')) {\n      result.inputPlaceholder = input.getAttribute('placeholder')\n    }\n    if (input.hasAttribute('value')) {\n      result.inputValue = input.getAttribute('value')\n    }\n  }\n  const inputOptions = templateContent.querySelectorAll('swal-input-option')\n  if (inputOptions.length) {\n    result.inputOptions = {}\n    toArray(inputOptions).forEach((option) => {\n      showWarningsForAttributes(option, ['value'])\n      const optionValue = option.getAttribute('value')\n      const optionName = option.innerHTML\n      result.inputOptions[optionValue] = optionName\n    })\n  }\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n * @param {string[]} paramNames\n */\nconst getSwalStringParams = (templateContent, paramNames) => {\n  const result = {}\n  for (const i in paramNames) {\n    const paramName = paramNames[i]\n    /** @type {HTMLElement} */\n    const tag = templateContent.querySelector(paramName)\n    if (tag) {\n      showWarningsForAttributes(tag, [])\n      result[paramName.replace(/^swal-/, '')] = tag.innerHTML.trim()\n    }\n  }\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n */\nconst showWarningsForElements = (templateContent) => {\n  const allowedElements = swalStringParams.concat([\n    'swal-param',\n    'swal-button',\n    'swal-image',\n    'swal-icon',\n    'swal-input',\n    'swal-input-option',\n  ])\n  toArray(templateContent.children).forEach((el) => {\n    const tagName = el.tagName.toLowerCase()\n    if (allowedElements.indexOf(tagName) === -1) {\n      warn(`Unrecognized element <${tagName}>`)\n    }\n  })\n}\n\n/**\n * @param {HTMLElement} el\n * @param {string[]} allowedAttributes\n */\nconst showWarningsForAttributes = (el, allowedAttributes) => {\n  toArray(el.attributes).forEach((attribute) => {\n    if (allowedAttributes.indexOf(attribute.name) === -1) {\n      warn([\n        `Unrecognized attribute \"${attribute.name}\" on <${el.tagName.toLowerCase()}>.`,\n        `${\n          allowedAttributes.length\n            ? `Allowed attributes are: ${allowedAttributes.join(', ')}`\n            : 'To set the value, use HTML within the element.'\n        }`,\n      ])\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}