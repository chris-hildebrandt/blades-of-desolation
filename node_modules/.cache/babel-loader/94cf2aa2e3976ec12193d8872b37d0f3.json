{"ast":null,"code":"import { isVisible } from './utils/dom/domUtils.js';\nimport { getInputValue } from './utils/dom/inputUtils.js';\nimport { getDenyButton, getValidationMessage } from './utils/dom/getters.js';\nimport { asPromise, capitalizeFirstLetter, error } from './utils/utils.js';\nimport { showLoading } from './staticMethods/showLoading.js';\nimport { DismissReason } from './utils/DismissReason.js';\nimport privateProps from './privateProps.js';\nimport { handleAwaitingPromise } from './instanceMethods.js';\nexport const handleConfirmButtonClick = instance => {\n  const innerParams = privateProps.innerParams.get(instance);\n  instance.disableButtons();\n\n  if (innerParams.input) {\n    handleConfirmOrDenyWithInput(instance, 'confirm');\n  } else {\n    confirm(instance, true);\n  }\n};\nexport const handleDenyButtonClick = instance => {\n  const innerParams = privateProps.innerParams.get(instance);\n  instance.disableButtons();\n\n  if (innerParams.returnInputValueOnDeny) {\n    handleConfirmOrDenyWithInput(instance, 'deny');\n  } else {\n    deny(instance, false);\n  }\n};\nexport const handleCancelButtonClick = (instance, dismissWith) => {\n  instance.disableButtons();\n  dismissWith(DismissReason.cancel);\n};\n\nconst handleConfirmOrDenyWithInput = (instance, type\n/* 'confirm' | 'deny' */\n) => {\n  const innerParams = privateProps.innerParams.get(instance);\n\n  if (!innerParams.input) {\n    return error(`The \"input\" parameter is needed to be set when using returnInputValueOn${capitalizeFirstLetter(type)}`);\n  }\n\n  const inputValue = getInputValue(instance, innerParams);\n\n  if (innerParams.inputValidator) {\n    handleInputValidator(instance, inputValue, type);\n  } else if (!instance.getInput().checkValidity()) {\n    instance.enableButtons();\n    instance.showValidationMessage(innerParams.validationMessage);\n  } else if (type === 'deny') {\n    deny(instance, inputValue);\n  } else {\n    confirm(instance, inputValue);\n  }\n};\n\nconst handleInputValidator = (instance, inputValue, type\n/* 'confirm' | 'deny' */\n) => {\n  const innerParams = privateProps.innerParams.get(instance);\n  instance.disableInput();\n  const validationPromise = Promise.resolve().then(() => asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage)));\n  validationPromise.then(validationMessage => {\n    instance.enableButtons();\n    instance.enableInput();\n\n    if (validationMessage) {\n      instance.showValidationMessage(validationMessage);\n    } else if (type === 'deny') {\n      deny(instance, inputValue);\n    } else {\n      confirm(instance, inputValue);\n    }\n  });\n};\n\nconst deny = (instance, value) => {\n  const innerParams = privateProps.innerParams.get(instance || this);\n\n  if (innerParams.showLoaderOnDeny) {\n    showLoading(getDenyButton());\n  }\n\n  if (innerParams.preDeny) {\n    privateProps.awaitingPromise.set(instance || this, true); // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preDeny's promise is received\n\n    const preDenyPromise = Promise.resolve().then(() => asPromise(innerParams.preDeny(value, innerParams.validationMessage)));\n    preDenyPromise.then(preDenyValue => {\n      if (preDenyValue === false) {\n        instance.hideLoading();\n        handleAwaitingPromise(instance);\n      } else {\n        instance.closePopup({\n          isDenied: true,\n          value: typeof preDenyValue === 'undefined' ? value : preDenyValue\n        });\n      }\n    }).catch(error => rejectWith(instance || this, error));\n  } else {\n    instance.closePopup({\n      isDenied: true,\n      value\n    });\n  }\n};\n\nconst succeedWith = (instance, value) => {\n  instance.closePopup({\n    isConfirmed: true,\n    value\n  });\n};\n\nconst rejectWith = (instance, error) => {\n  instance.rejectPromise(error);\n};\n\nconst confirm = (instance, value) => {\n  const innerParams = privateProps.innerParams.get(instance || this);\n\n  if (innerParams.showLoaderOnConfirm) {\n    showLoading();\n  }\n\n  if (innerParams.preConfirm) {\n    instance.resetValidationMessage();\n    privateProps.awaitingPromise.set(instance || this, true); // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preConfirm's promise is received\n\n    const preConfirmPromise = Promise.resolve().then(() => asPromise(innerParams.preConfirm(value, innerParams.validationMessage)));\n    preConfirmPromise.then(preConfirmValue => {\n      if (isVisible(getValidationMessage()) || preConfirmValue === false) {\n        instance.hideLoading();\n        handleAwaitingPromise(instance);\n      } else {\n        succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);\n      }\n    }).catch(error => rejectWith(instance || this, error));\n  } else {\n    succeedWith(instance, value);\n  }\n};","map":{"version":3,"sources":["C:/Users/dhild/source/mini-projects/blades-of-desolation/node_modules/sweetalert2/src/buttons-handlers.js"],"names":["isVisible","getInputValue","getDenyButton","getValidationMessage","asPromise","capitalizeFirstLetter","error","showLoading","DismissReason","privateProps","handleAwaitingPromise","handleConfirmButtonClick","instance","innerParams","get","disableButtons","input","handleConfirmOrDenyWithInput","confirm","handleDenyButtonClick","returnInputValueOnDeny","deny","handleCancelButtonClick","dismissWith","cancel","type","inputValue","inputValidator","handleInputValidator","getInput","checkValidity","enableButtons","showValidationMessage","validationMessage","disableInput","validationPromise","Promise","resolve","then","enableInput","value","showLoaderOnDeny","preDeny","awaitingPromise","set","preDenyPromise","preDenyValue","hideLoading","closePopup","isDenied","catch","rejectWith","succeedWith","isConfirmed","rejectPromise","showLoaderOnConfirm","preConfirm","resetValidationMessage","preConfirmPromise","preConfirmValue"],"mappings":"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","sourcesContent":["import { isVisible } from './utils/dom/domUtils.js'\nimport { getInputValue } from './utils/dom/inputUtils.js'\nimport { getDenyButton, getValidationMessage } from './utils/dom/getters.js'\nimport { asPromise, capitalizeFirstLetter, error } from './utils/utils.js'\nimport { showLoading } from './staticMethods/showLoading.js'\nimport { DismissReason } from './utils/DismissReason.js'\nimport privateProps from './privateProps.js'\nimport { handleAwaitingPromise } from './instanceMethods.js'\n\nexport const handleConfirmButtonClick = (instance) => {\n  const innerParams = privateProps.innerParams.get(instance)\n  instance.disableButtons()\n  if (innerParams.input) {\n    handleConfirmOrDenyWithInput(instance, 'confirm')\n  } else {\n    confirm(instance, true)\n  }\n}\n\nexport const handleDenyButtonClick = (instance) => {\n  const innerParams = privateProps.innerParams.get(instance)\n  instance.disableButtons()\n  if (innerParams.returnInputValueOnDeny) {\n    handleConfirmOrDenyWithInput(instance, 'deny')\n  } else {\n    deny(instance, false)\n  }\n}\n\nexport const handleCancelButtonClick = (instance, dismissWith) => {\n  instance.disableButtons()\n  dismissWith(DismissReason.cancel)\n}\n\nconst handleConfirmOrDenyWithInput = (instance, type /* 'confirm' | 'deny' */) => {\n  const innerParams = privateProps.innerParams.get(instance)\n  if (!innerParams.input) {\n    return error(\n      `The \"input\" parameter is needed to be set when using returnInputValueOn${capitalizeFirstLetter(type)}`\n    )\n  }\n  const inputValue = getInputValue(instance, innerParams)\n  if (innerParams.inputValidator) {\n    handleInputValidator(instance, inputValue, type)\n  } else if (!instance.getInput().checkValidity()) {\n    instance.enableButtons()\n    instance.showValidationMessage(innerParams.validationMessage)\n  } else if (type === 'deny') {\n    deny(instance, inputValue)\n  } else {\n    confirm(instance, inputValue)\n  }\n}\n\nconst handleInputValidator = (instance, inputValue, type /* 'confirm' | 'deny' */) => {\n  const innerParams = privateProps.innerParams.get(instance)\n  instance.disableInput()\n  const validationPromise = Promise.resolve().then(() =>\n    asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage))\n  )\n  validationPromise.then((validationMessage) => {\n    instance.enableButtons()\n    instance.enableInput()\n    if (validationMessage) {\n      instance.showValidationMessage(validationMessage)\n    } else if (type === 'deny') {\n      deny(instance, inputValue)\n    } else {\n      confirm(instance, inputValue)\n    }\n  })\n}\n\nconst deny = (instance, value) => {\n  const innerParams = privateProps.innerParams.get(instance || this)\n\n  if (innerParams.showLoaderOnDeny) {\n    showLoading(getDenyButton())\n  }\n\n  if (innerParams.preDeny) {\n    privateProps.awaitingPromise.set(instance || this, true) // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preDeny's promise is received\n    const preDenyPromise = Promise.resolve().then(() =>\n      asPromise(innerParams.preDeny(value, innerParams.validationMessage))\n    )\n    preDenyPromise\n      .then((preDenyValue) => {\n        if (preDenyValue === false) {\n          instance.hideLoading()\n          handleAwaitingPromise(instance)\n        } else {\n          instance.closePopup({ isDenied: true, value: typeof preDenyValue === 'undefined' ? value : preDenyValue })\n        }\n      })\n      .catch((error) => rejectWith(instance || this, error))\n  } else {\n    instance.closePopup({ isDenied: true, value })\n  }\n}\n\nconst succeedWith = (instance, value) => {\n  instance.closePopup({ isConfirmed: true, value })\n}\n\nconst rejectWith = (instance, error) => {\n  instance.rejectPromise(error)\n}\n\nconst confirm = (instance, value) => {\n  const innerParams = privateProps.innerParams.get(instance || this)\n\n  if (innerParams.showLoaderOnConfirm) {\n    showLoading()\n  }\n\n  if (innerParams.preConfirm) {\n    instance.resetValidationMessage()\n    privateProps.awaitingPromise.set(instance || this, true) // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preConfirm's promise is received\n    const preConfirmPromise = Promise.resolve().then(() =>\n      asPromise(innerParams.preConfirm(value, innerParams.validationMessage))\n    )\n    preConfirmPromise\n      .then((preConfirmValue) => {\n        if (isVisible(getValidationMessage()) || preConfirmValue === false) {\n          instance.hideLoading()\n          handleAwaitingPromise(instance)\n        } else {\n          succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue)\n        }\n      })\n      .catch((error) => rejectWith(instance || this, error))\n  } else {\n    succeedWith(instance, value)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}