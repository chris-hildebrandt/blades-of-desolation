{"ast":null,"code":"import globalState from '../globalState.js';\nimport privateProps from '../privateProps.js';\nimport privateMethods from '../privateMethods.js';\nexport function _destroy() {\n  const domCache = privateProps.domCache.get(this);\n  const innerParams = privateProps.innerParams.get(this);\n\n  if (!innerParams) {\n    disposeWeakMaps(this); // The WeakMaps might have been partly destroyed, we must recall it to dispose any remaining WeakMaps #2335\n\n    return; // This instance has already been destroyed\n  } // Check if there is another Swal closing\n\n\n  if (domCache.popup && globalState.swalCloseEventFinishedCallback) {\n    globalState.swalCloseEventFinishedCallback();\n    delete globalState.swalCloseEventFinishedCallback;\n  } // Check if there is a swal disposal defer timer\n\n\n  if (globalState.deferDisposalTimer) {\n    clearTimeout(globalState.deferDisposalTimer);\n    delete globalState.deferDisposalTimer;\n  }\n\n  if (typeof innerParams.didDestroy === 'function') {\n    innerParams.didDestroy();\n  }\n\n  disposeSwal(this);\n}\n\nconst disposeSwal = instance => {\n  disposeWeakMaps(instance); // Unset this.params so GC will dispose it (#1569)\n\n  delete instance.params; // Unset globalState props so GC will dispose globalState (#1569)\n\n  delete globalState.keydownHandler;\n  delete globalState.keydownTarget; // Unset currentInstance\n\n  delete globalState.currentInstance;\n};\n\nconst disposeWeakMaps = instance => {\n  // If the current instance is awaiting a promise result, we keep the privateMethods to call them once the promise result is retrieved #2335\n  if (instance.isAwaitingPromise()) {\n    unsetWeakMaps(privateProps, instance);\n    privateProps.awaitingPromise.set(instance, true);\n  } else {\n    unsetWeakMaps(privateMethods, instance);\n    unsetWeakMaps(privateProps, instance);\n  }\n};\n\nconst unsetWeakMaps = (obj, instance) => {\n  for (const i in obj) {\n    obj[i].delete(instance);\n  }\n};","map":{"version":3,"sources":["C:/Users/dhild/source/mini-projects/blades-of-desolation/node_modules/sweetalert2/src/instanceMethods/_destroy.js"],"names":["globalState","privateProps","privateMethods","_destroy","domCache","get","innerParams","disposeWeakMaps","popup","swalCloseEventFinishedCallback","deferDisposalTimer","clearTimeout","didDestroy","disposeSwal","instance","params","keydownHandler","keydownTarget","currentInstance","isAwaitingPromise","unsetWeakMaps","awaitingPromise","set","obj","i","delete"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AAEA,OAAO,SAASC,QAAT,GAAoB;AACzB,QAAMC,QAAQ,GAAGH,YAAY,CAACG,QAAb,CAAsBC,GAAtB,CAA0B,IAA1B,CAAjB;AACA,QAAMC,WAAW,GAAGL,YAAY,CAACK,WAAb,CAAyBD,GAAzB,CAA6B,IAA7B,CAApB;;AAEA,MAAI,CAACC,WAAL,EAAkB;AAChBC,IAAAA,eAAe,CAAC,IAAD,CAAf,CADgB,CACM;;AACtB,WAFgB,CAET;AACR,GAPwB,CASzB;;;AACA,MAAIH,QAAQ,CAACI,KAAT,IAAkBR,WAAW,CAACS,8BAAlC,EAAkE;AAChET,IAAAA,WAAW,CAACS,8BAAZ;AACA,WAAOT,WAAW,CAACS,8BAAnB;AACD,GAbwB,CAezB;;;AACA,MAAIT,WAAW,CAACU,kBAAhB,EAAoC;AAClCC,IAAAA,YAAY,CAACX,WAAW,CAACU,kBAAb,CAAZ;AACA,WAAOV,WAAW,CAACU,kBAAnB;AACD;;AAED,MAAI,OAAOJ,WAAW,CAACM,UAAnB,KAAkC,UAAtC,EAAkD;AAChDN,IAAAA,WAAW,CAACM,UAAZ;AACD;;AACDC,EAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,MAAMA,WAAW,GAAIC,QAAD,IAAc;AAChCP,EAAAA,eAAe,CAACO,QAAD,CAAf,CADgC,CAEhC;;AACA,SAAOA,QAAQ,CAACC,MAAhB,CAHgC,CAIhC;;AACA,SAAOf,WAAW,CAACgB,cAAnB;AACA,SAAOhB,WAAW,CAACiB,aAAnB,CANgC,CAOhC;;AACA,SAAOjB,WAAW,CAACkB,eAAnB;AACD,CATD;;AAWA,MAAMX,eAAe,GAAIO,QAAD,IAAc;AACpC;AACA,MAAIA,QAAQ,CAACK,iBAAT,EAAJ,EAAkC;AAChCC,IAAAA,aAAa,CAACnB,YAAD,EAAea,QAAf,CAAb;AACAb,IAAAA,YAAY,CAACoB,eAAb,CAA6BC,GAA7B,CAAiCR,QAAjC,EAA2C,IAA3C;AACD,GAHD,MAGO;AACLM,IAAAA,aAAa,CAAClB,cAAD,EAAiBY,QAAjB,CAAb;AACAM,IAAAA,aAAa,CAACnB,YAAD,EAAea,QAAf,CAAb;AACD;AACF,CATD;;AAWA,MAAMM,aAAa,GAAG,CAACG,GAAD,EAAMT,QAAN,KAAmB;AACvC,OAAK,MAAMU,CAAX,IAAgBD,GAAhB,EAAqB;AACnBA,IAAAA,GAAG,CAACC,CAAD,CAAH,CAAOC,MAAP,CAAcX,QAAd;AACD;AACF,CAJD","sourcesContent":["import globalState from '../globalState.js'\nimport privateProps from '../privateProps.js'\nimport privateMethods from '../privateMethods.js'\n\nexport function _destroy() {\n  const domCache = privateProps.domCache.get(this)\n  const innerParams = privateProps.innerParams.get(this)\n\n  if (!innerParams) {\n    disposeWeakMaps(this) // The WeakMaps might have been partly destroyed, we must recall it to dispose any remaining WeakMaps #2335\n    return // This instance has already been destroyed\n  }\n\n  // Check if there is another Swal closing\n  if (domCache.popup && globalState.swalCloseEventFinishedCallback) {\n    globalState.swalCloseEventFinishedCallback()\n    delete globalState.swalCloseEventFinishedCallback\n  }\n\n  // Check if there is a swal disposal defer timer\n  if (globalState.deferDisposalTimer) {\n    clearTimeout(globalState.deferDisposalTimer)\n    delete globalState.deferDisposalTimer\n  }\n\n  if (typeof innerParams.didDestroy === 'function') {\n    innerParams.didDestroy()\n  }\n  disposeSwal(this)\n}\n\nconst disposeSwal = (instance) => {\n  disposeWeakMaps(instance)\n  // Unset this.params so GC will dispose it (#1569)\n  delete instance.params\n  // Unset globalState props so GC will dispose globalState (#1569)\n  delete globalState.keydownHandler\n  delete globalState.keydownTarget\n  // Unset currentInstance\n  delete globalState.currentInstance\n}\n\nconst disposeWeakMaps = (instance) => {\n  // If the current instance is awaiting a promise result, we keep the privateMethods to call them once the promise result is retrieved #2335\n  if (instance.isAwaitingPromise()) {\n    unsetWeakMaps(privateProps, instance)\n    privateProps.awaitingPromise.set(instance, true)\n  } else {\n    unsetWeakMaps(privateMethods, instance)\n    unsetWeakMaps(privateProps, instance)\n  }\n}\n\nconst unsetWeakMaps = (obj, instance) => {\n  for (const i in obj) {\n    obj[i].delete(instance)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}