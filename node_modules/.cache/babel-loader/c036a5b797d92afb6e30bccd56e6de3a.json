{"ast":null,"code":"import { reactive } from \"@vue/reactivity\";\nimport { itemsService } from \"@/services/ItemsService\";\nimport { characterService } from \"@/services/CharacterService\";\nimport { gameService } from \"@/services/GameService\";\nimport Notify from \"@/utils/Notify\";\nimport $store from \"@/store/index\";\nimport { computed } from \"@vue/runtime-core\";\nimport { spellsService } from \"@/services/SpellsService\";\nimport { getItemIcon, getDmgTypeIcon } from \"@/utils/getIcon\";\nimport { getRarityFullName } from \"@/utils/getRarityFullName\";\nexport default {\n  name: 'CharacterDetailsModal',\n  props: {\n    character: {\n      require: true,\n      type: Object\n    }\n  },\n\n  setup() {\n    const state = reactive({\n      levelUpChart: $store.state.levelUpChart,\n      items: computed(() => $store.state.player.items.sort((a, b) => a.name.localeCompare(b.name)).filter(function (item, pos, ary) {\n        return !pos || item.name != ary[pos - 1].name;\n      }))\n    });\n    return state;\n  },\n\n  methods: {\n    getItemIcon: getItemIcon,\n    getRarityFullName: getRarityFullName,\n    getDmgTypeIcon: getDmgTypeIcon,\n\n    getItemEffectsDisplay(item) {\n      itemsService.getItemEffectsDisplay(item);\n    },\n\n    getAttackSpeed(character) {\n      return gameService.getSpeedCost(character);\n    },\n\n    unequip(character, equipment) {\n      itemsService.unequipItem(character, equipment);\n    },\n\n    equip(character, item) {\n      if (item.scroll) {\n        this.useScroll(item.name, character);\n        return;\n      }\n\n      if (item.type == 'consumable') {\n        itemsService.useConsumableItem(item, character);\n        return;\n      }\n\n      itemsService.equipItem(character, item);\n    },\n\n    getStatDiff(character, item) {\n      let diff = '';\n\n      if (Array.isArray(item.value)) {\n        for (let i = 0; i < item.value.length; i++) {\n          diff += this.compareEffectDiff(character.equipment, {\n            effect: item.effect[i],\n            value: item.value[i],\n            type: item.type\n          });\n        }\n      } else {\n        diff += this.compareEffectDiff(character.equipment, item);\n      }\n\n      return diff;\n    },\n\n    compareEffectDiff(equipment, item) {\n      let equipItem = equipment.filter(e => e.type === item.type)[0];\n\n      if (!equipItem) {\n        if (typeof item.value == 'object') {\n          return item.value.name + ' +' + item.value.chance + '% ';\n        }\n\n        return `+${item.value} ${item.effect} `;\n      }\n\n      let matchingEffect = equipItem.effect;\n      let index = false;\n\n      if (Array.isArray(matchingEffect)) {\n        index = matchingEffect.findIndex(e => e == item.effect);\n        matchingEffect = matchingEffect.filter(e => e == item.effect)[0];\n      } else {\n        matchingEffect = matchingEffect == item.effect;\n      }\n\n      if (!matchingEffect) {\n        if (typeof item.value == 'object') {\n          return item.value.name + ' +' + item.value.chance + '% ';\n        }\n\n        return `+${item.value} ${item.effect} `;\n      }\n\n      let equipValue = equipItem.value[index] ?? equipItem.value;\n      let equipEffect = equipItem.effect[index] ?? equipItem.effect;\n\n      if (equipValue == item.value) {\n        return '';\n      }\n\n      if (typeof item.value == 'string') {\n        return `+${item.value} ${item.effect} `;\n      }\n\n      if (typeof item.value == 'object') {\n        return item.value.name + ' +' + item.value.chance + '% ';\n      }\n\n      let effectDiff = item.value - equipValue;\n      let operator = effectDiff > 0 ? '+' : '';\n      return operator + effectDiff + ' ' + equipEffect + ' ';\n    },\n\n    statDiffColor(character, item) {\n      let slot = true;\n      character.equipment.forEach(e => {\n        if (e.type == item.type) {\n          slot = item.price - e.price > 0 ? true : item.price - e.price < 0 ? false : null;\n        }\n      });\n      return slot;\n    },\n\n    async improveStat(character) {\n      if (character.statBonus <= 0) {\n        return;\n      }\n\n      let options = {\n        baseStrength: 'Strength'\n      };\n\n      for (let stat in character) {\n        if (character[stat] > 0) {\n          // TODO double check these stats, and make sure all base stats are ok to add\n          if (stat == 'level' || stat == 'exp' || stat == 'actions' || stat == 'hp' || stat == 'strength' || stat == 'inBattle' || stat == 'magic' || stat == 'statBonus' || stat == 'magicRegen' || stat == 'baseStrength') {\n            continue;\n          }\n\n          options[stat] = stat.replace('base', '');\n        }\n      }\n\n      let lvlUpStat = await Notify.selectOptions(options);\n\n      if (!lvlUpStat) {\n        return;\n      }\n\n      character[lvlUpStat]++;\n\n      if (character[lvlUpStat.toLowerCase().replace('base', '')]) {\n        character[lvlUpStat.toLowerCase().replace('base', '')]++;\n      }\n\n      character.statBonus--;\n    },\n\n    async improveSpell(character) {\n      if (character.statBonus <= 0) {\n        return;\n      }\n\n      let options = {};\n\n      if (character.spells.length > 0) {\n        character.spells.forEach(s => options[s.name] = s.name);\n      } else {\n        $store.state.spells[0].forEach(s => options[s.name] = s.name);\n      }\n\n      let lvlUpSpell = await Notify.selectOptions(options);\n\n      if (!lvlUpSpell) {\n        return;\n      }\n\n      if (spellsService.learnSpell(lvlUpSpell, character)) {\n        character.statBonus--;\n      }\n    },\n\n    useScroll(spellName, character) {\n      if (spellsService.learnSpell(spellName, character)) {\n        let index = $store.state.player.items.findIndex(i => i.name == spellName);\n        $store.state.player.items.splice(index, 1);\n      }\n    },\n\n    async deleteCharacter() {\n      if (await Notify.confirm('Removing Character', 'Are you sure you want to remove ' + this.character.name + ' from your party?', 'warning', 'Remove')) {\n        characterService.deleteCharacter(this.character.id);\n      }\n    },\n\n    setSpellDefault(spell, index) {\n      this.$props.character.spells.splice(index, 1);\n      this.$props.character.spells.unshift(spell);\n    },\n\n    nextCharacter(dir) {\n      let index = $store.state.player.characters.findIndex(c => c.id == this.character.id);\n      let c = $store.state.player.characters[index + dir >= $store.state.player.characters.length ? 0 : index + dir < 0 ? $store.state.player.characters.length - 1 : index + dir];\n      $store.state.selected = c;\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["reactive","itemsService","characterService","gameService","Notify","$store","computed","spellsService","getItemIcon","getDmgTypeIcon","getRarityFullName","name","props","character","require","type","Object","setup","state","levelUpChart","items","player","sort","a","b","localeCompare","filter","item","pos","ary","methods","getItemEffectsDisplay","getAttackSpeed","getSpeedCost","unequip","equipment","unequipItem","equip","scroll","useScroll","useConsumableItem","equipItem","getStatDiff","diff","Array","isArray","value","i","length","compareEffectDiff","effect","e","chance","matchingEffect","index","findIndex","equipValue","equipEffect","effectDiff","operator","statDiffColor","slot","forEach","price","improveStat","statBonus","options","baseStrength","stat","replace","lvlUpStat","selectOptions","toLowerCase","improveSpell","spells","s","lvlUpSpell","learnSpell","spellName","splice","deleteCharacter","confirm","id","setSpellDefault","spell","$props","unshift","nextCharacter","dir","characters","c","selected"],"sourceRoot":"","sources":["C:\\Users\\dhild\\source\\mini-projects\\blades-of-desolation\\src\\components\\CharacterDetailsModal.vue"],"sourcesContent":["<template>\r\n<div class=\"modal fade text-dark\" id=\"characterDetailsModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"characterDetailsModalLabel\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog modal-lg\" role=\"document\">\r\n    <div class=\"modal-content text-light\" v-if=\"character\">\r\n      <div class=\"modal-header\">\r\n        <div class=\"modal-title container\">\r\n          <div class=\"row\">\r\n            <h5 class=\"col-4\">{{character.name}}</h5>\r\n            <h5 class=\"col-4\">{{character.classType}}</h5>\r\n            <h5 class=\"col-4\">{{character.race}}</h5>\r\n          </div>\r\n          <div class=\"row\">\r\n            <sup class=\"col-4\"></sup>\r\n            <sup class=\"col-4\">Class</sup>\r\n            <sup class=\"col-4\">Race</sup>\r\n          </div>\r\n          <button type=\"button\" class=\"close text-danger\" data-dismiss=\"modal\" aria-label=\"Close\" @click=\"deleteCharacter\" title=\"Delete Character\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"char-bg-img\" :style=\"'background-image: url('+character.img+')'\"></div>\r\n      <div class=\"modal-body container position-absolute\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6 col-12\">\r\n            <strong for=\"stats\">Stats</strong>\r\n            <div class=\"mt-3 pl-3 d-grid bg-darken\">\r\n                <span>HP: {{Math.round(character.hp*10)/10}} / {{character.baseHp}}</span>\r\n                <span>LVL: {{character.level}}</span>\r\n                <span>EXP: {{Math.round(character.exp)}} / {{levelUpChart[character.level]}}</span>\r\n                <span>Speed: {{character.actions}} / {{character.baseActions}}</span>\r\n                <span title=\"Actions it takes to make an attack\">Attack Speed: {{getAttackSpeed(character)}}</span>\r\n                <span>STR: {{character.strength}}</span>\r\n                <span >DMG Type: {{character.dmgType}} <span v-html=\"getDmgTypeIcon(character.dmgType)\"></span></span>\r\n                <span v-if=\"character.baseMagic\">Magic: {{character.magic}} / {{character.baseMagic}}</span>\r\n                <span v-if=\"character.regen\" title=\"HP is retored by this amount at the end of each turn in battle\">Regen: {{character.regen}}</span>\r\n                <span v-if=\"character.magicRegen\" title=\"Magic is retored by this amount at the end of each turn in battle\">Magic Regen: {{character.magicRegen}}</span>\r\n                <span v-if=\"character.dodge\">Dodge: {{character.dodge}}%</span>\r\n                <span v-if=\"character.thorns\">Thorns: {{character.thorns}}</span>\r\n                <span v-if=\"character.lifeSteal\">Life Steal: {{character.lifeSteal}}%</span>\r\n                <span v-if=\"character.luck\" title=\"improves chance for better items, dodged attacks, crit hits and flee\">Luck: {{character.luck}}%</span>\r\n                <span v-if=\"character.absorb\">Absorb: {{character.absorb}}</span>\r\n                <span v-if=\"character.physicalResistance\">Physical Resistance: {{character.physicalResistance}}%</span>\r\n                <span v-if=\"character.magicResistance\">Magic Resistance: {{character.magicResistance}}%</span>\r\n              <ul class=\"col-md-6 col-12\" v-if=\"character.resistances.length > 0\">\r\n                <label class=\"text-left w-100\" for=\"resistances\">Resistances: </label>\r\n                <li class=\"ml-4\" v-for=\"resistance in character.resistances\" :key=\"resistance\">{{resistance}}</li>\r\n              </ul>\r\n              <ul class=\"col-md-6 col-12\" v-if=\"character.immunities.length > 0\">\r\n                <label class=\"text-left w-100\" for=\"immunities\">Immunities: </label>\r\n                <li class=\"ml-4\" v-for=\"resistance in character.immunities\" :key=\"resistance\">{{resistance}}</li>\r\n              </ul>\r\n              <ul class=\"col-md-6 col-12\" v-if=\"character.vulnerabilities.length > 0\">\r\n                <label class=\"text-left w-100\" for=\"vulnerabilities\">Vulnerabilities: </label>\r\n                <li class=\"ml-4\" v-for=\"resistance in character.vulnerabilities\" :key=\"resistance\">{{resistance}}</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-6 col-12\">\r\n            <strong for=\"items\">Items</strong>\r\n            <ul class=\"border border-rounded h-100 bg-darken\" v-if=\"items.length > 0\">\r\n              <li :id=\"'item'+item.id\" class=\"click\" :class=\"statDiffColor(character, item) ? 'text-success' : statDiffColor(character, item) == null ? '' : 'text-danger'\" v-for=\"item in items\" :key=\"item.id\" @click=\"equip(character, item)\" :title=\"getItemEffectsDisplay(item)\">{{item.name}}<span v-html=\"getItemIcon(item.type)\"></span> {{getStatDiff(character, item)}}</li>\r\n          </ul>\r\n          <p v-else>No items in pouch</p>\r\n          </div>\r\n        </div>\r\n        <div class=\"row mt-4\">\r\n          <div class=\"col-md-6 col-12\" v-if=\"character.equipment.length > 0\">\r\n            <strong>Equipment</strong>\r\n            <ul class=\"border-rounded border py-3 bg-darken\">\r\n              <li class=\"equipment click\" :class=\"getRarityFullName(equipment.rarity)\" v-for=\"equipment in character.equipment\" :key=\"equipment.id\" :title=\"equipment.effect+' +'+equipment.value\" @click=\"unequip(character, equipment)\">\r\n                {{equipment.name}} <span v-html=\"getItemIcon(equipment.type)\"></span> {{equipment.speed > 0 ? ' (-'+equipment.speed+' speed)' : ''}}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div class=\"col-md-6 col-12\" v-if=\"character.sets.length > 0\">\r\n            <strong>Set Bonus</strong>\r\n            <ul class=\"border-rounded border py-3 bg-darken\">\r\n              <li v-for=\"set in character.sets\" :key=\"set\">\r\n                {{set}}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div class=\"col-6\" v-if=\"character.spells.length > 0\">\r\n            <strong>Spells</strong>\r\n            <ul class=\"border-rounded border h-75 bg-darken\">\r\n              <li v-for=\"(spell, index) in character.spells\" :key=\"spell.name\" :title=\"spell.title ?? spell.getTitle()\" @click=\"setSpellDefault(spell, index)\">{{spell.name}} lvl-{{spell.level}}</li>\r\n            </ul>\r\n          </div>\r\n          <div class=\"col-6\" v-if=\"character.abilities.length > 0\">\r\n            <strong>Abilities</strong>\r\n            <ul class=\"border-rounded border h-75 bg-darken\">\r\n              <li v-for=\"ability in character.abilities\" :key=\"ability.name\" :title=\"ability.title ?? ability.getTitle()\">{{ability.name}} lvl-{{ability.level}}</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <span class=\"mt-3 text-center\">{{character.statBonus > 0 ? 'Level Up Points: '+character.statBonus : ''}}</span>\r\n      <div class=\"my-2\">\r\n        <button class=\"btn btn-outline-secondary mx-3\" @click=\"nextCharacter(-1)\">&#60;</button>\r\n        <button class=\"btn btn-outline-danger\" data-dismiss=\"modal\">Close</button>\r\n        <button class=\"btn btn-outline-success\" @click=\"improveStat(character)\" v-if=\"character.statBonus > 0\" >Improve Stat</button>\r\n        <button class=\"btn btn-outline-success\" @click=\"improveSpell(character)\" v-if=\"character.statBonus > 0 && character.baseMagic > 0\" >{{character.spells.lenght > 0 ? 'Improve Spell' : 'Learn Spell'}}</button>\r\n        <button class=\"btn btn-outline-secondary mx-3\" @click=\"nextCharacter(1)\">></button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport { reactive } from \"@vue/reactivity\"\r\nimport { itemsService } from \"@/services/ItemsService\"\r\nimport { characterService } from \"@/services/CharacterService\"\r\nimport { gameService } from \"@/services/GameService\"\r\nimport Notify from \"@/utils/Notify\"\r\nimport $store from \"@/store/index\"\r\nimport { computed } from \"@vue/runtime-core\"\r\nimport { spellsService } from \"@/services/SpellsService\"\r\nimport { getItemIcon, getDmgTypeIcon } from \"@/utils/getIcon\"\r\nimport { getRarityFullName } from \"@/utils/getRarityFullName\"\r\nexport default {\r\n  name: 'CharacterDetailsModal',\r\n  props:{\r\n    character: {require: true, type: Object}\r\n  },\r\n  setup(){\r\n    const state = reactive({\r\n      levelUpChart: $store.state.levelUpChart,\r\n      items: computed(()=> $store.state.player.items.sort((a,b)=>a.name.localeCompare(b.name)).filter(function(item, pos, ary) {return !pos || item.name != ary[pos - 1].name})),\r\n    })\r\n    return state\r\n  },\r\n  methods: {\r\n    getItemIcon : getItemIcon,\r\n    getRarityFullName : getRarityFullName,\r\n    getDmgTypeIcon : getDmgTypeIcon,\r\n    getItemEffectsDisplay(item){\r\n      itemsService.getItemEffectsDisplay(item)\r\n    },\r\n    getAttackSpeed(character){\r\n      return gameService.getSpeedCost(character)\r\n    },\r\n    unequip(character, equipment){\r\n      itemsService.unequipItem(character, equipment)\r\n    },\r\n    equip(character, item){\r\n      if(item.scroll){\r\n        this.useScroll(item.name, character)\r\n        return\r\n      }\r\n      if(item.type == 'consumable'){\r\n        itemsService.useConsumableItem(item, character)\r\n        return\r\n      }\r\n      itemsService.equipItem(character, item)\r\n    },\r\n    getStatDiff(character, item){\r\n      let diff = ''\r\n      if(Array.isArray(item.value)){\r\n        for(let i = 0; i < item.value.length; i++){\r\n          diff += this.compareEffectDiff(character.equipment, {effect: item.effect[i], value: item.value[i], type: item.type})\r\n        }\r\n      }else{\r\n        diff += this.compareEffectDiff(character.equipment, item)\r\n      }\r\n      return diff\r\n    },\r\n    compareEffectDiff(equipment, item){\r\n      let equipItem = equipment.filter(e => e.type === item.type)[0]\r\n      if(!equipItem){\r\n        if(typeof item.value == 'object'){\r\n          return item.value.name+' +'+item.value.chance+'% '\r\n        }\r\n        return `+${item.value} ${item.effect} `\r\n      }\r\n      let matchingEffect = equipItem.effect\r\n      let index = false\r\n      if(Array.isArray(matchingEffect)){\r\n        index = matchingEffect.findIndex(e => e == item.effect)\r\n        matchingEffect = matchingEffect.filter(e => e == item.effect)[0]\r\n      }else{\r\n        matchingEffect = matchingEffect == item.effect\r\n      }\r\n      if(!matchingEffect){\r\n        if(typeof item.value == 'object'){\r\n          return item.value.name+' +'+item.value.chance+'% '\r\n        }\r\n        return `+${item.value} ${item.effect} `\r\n      }\r\n      let equipValue = equipItem.value[index] ?? equipItem.value\r\n      let equipEffect = equipItem.effect[index] ?? equipItem.effect\r\n      if(equipValue == item.value){\r\n        return ''\r\n      }\r\n      if(typeof item.value == 'string'){\r\n        return `+${item.value} ${item.effect} `\r\n      }\r\n      if(typeof item.value == 'object'){\r\n        return item.value.name+' +'+item.value.chance+'% '\r\n      }\r\n      let effectDiff = item.value - equipValue\r\n      let operator = effectDiff > 0 ? '+' : ''\r\n      return operator+effectDiff+' '+equipEffect+' '\r\n    },\r\n    statDiffColor(character, item){\r\n      let slot = true\r\n      character.equipment.forEach(e => {\r\n        if(e.type == item.type){\r\n          slot = (item.price - e.price) > 0 ? true : (item.price - e.price) < 0 ? false : null\r\n        }\r\n        })\r\n      return slot\r\n    },\r\n    async improveStat(character){\r\n      if(character.statBonus <= 0){\r\n        return\r\n      }\r\n      let options = {baseStrength: 'Strength'}\r\n      for(let stat in character){\r\n        if(character[stat] > 0){\r\n          // TODO double check these stats, and make sure all base stats are ok to add\r\n          if(stat == 'level' || stat == 'exp' || stat == 'actions'|| stat == 'hp' || stat == 'strength' || stat == 'inBattle' || stat == 'magic' || stat == 'statBonus' || stat == 'magicRegen' || stat == 'baseStrength'){\r\n            continue\r\n          }\r\n          options[stat] = stat.replace('base', '')\r\n        }\r\n      }\r\n      let lvlUpStat = await Notify.selectOptions(options)\r\n      if(!lvlUpStat){\r\n        return\r\n      }\r\n      character[lvlUpStat]++\r\n      if(character[lvlUpStat.toLowerCase().replace('base', '')]){\r\n        character[lvlUpStat.toLowerCase().replace('base', '')]++\r\n      }\r\n      character.statBonus--\r\n    },\r\n    async improveSpell(character){\r\n      if(character.statBonus <= 0){\r\n        return\r\n      }\r\n      let options = {}\r\n      if(character.spells.length > 0){\r\n        character.spells.forEach(s => options[s.name] = s.name)\r\n      }else{\r\n        $store.state.spells[0].forEach(s => options[s.name] = s.name)\r\n      }\r\n      let lvlUpSpell = await Notify.selectOptions(options)\r\n      if(!lvlUpSpell){\r\n        return\r\n      }\r\n      if(spellsService.learnSpell(lvlUpSpell, character)){\r\n        character.statBonus--\r\n      }\r\n    },\r\n    useScroll(spellName, character){\r\n      if(spellsService.learnSpell(spellName, character)){\r\n        let index = $store.state.player.items.findIndex(i => i.name == spellName)\r\n        $store.state.player.items.splice(index, 1)\r\n      }\r\n    },\r\n    async deleteCharacter(){\r\n      if(await Notify.confirm('Removing Character', 'Are you sure you want to remove '+this.character.name+' from your party?', 'warning', 'Remove')){\r\n        characterService.deleteCharacter(this.character.id)\r\n      }\r\n    },\r\n    setSpellDefault(spell, index){\r\n      this.$props.character.spells.splice(index, 1)\r\n      this.$props.character.spells.unshift(spell)\r\n    },\r\n    nextCharacter(dir){\r\n      let index = $store.state.player.characters.findIndex(c => c.id == this.character.id)\r\n      let c = $store.state.player.characters[index+dir >= $store.state.player.characters.length ? 0 : index+dir < 0 ? $store.state.player.characters.length-1 : index+dir]\r\n      $store.state.selected = c\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scope>\r\nspan{\r\n  text-align: justify;\r\n}\r\n.modal-body{\r\n  overflow-y: auto;\r\n  margin-top: 65px;\r\n  height: 450px;\r\n}\r\n.char-bg-img{\r\n  overflow-y: auto;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-size: contain;\r\n  height: 450px;\r\n  filter: blur(1px);\r\n}\r\n.bg-darken{\r\n  backdrop-filter: brightness(0.5);\r\n}\r\n.close{\r\n  position: absolute;\r\n  top: 1vh;\r\n  right: 3vw;\r\n}\r\n.d-grid{\r\n  display: grid;\r\n}\r\n.equipment:hover{\r\n  color: rgba(255, 0, 0, 0.596);\r\n}\r\n@media screen and (min-width: 992px) {\r\n  .text-size{\r\n    font-size: large;\r\n  }\r\n}\r\n@media screen and (max-width: 992px) {\r\n  .text-size{\r\n    font-size: small;\r\n  }\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}