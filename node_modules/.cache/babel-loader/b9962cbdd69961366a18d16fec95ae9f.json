{"ast":null,"code":"import _defineProperty from \"C:/Users/dhild/source/mini-projects/blades-of-desolation/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Item } from \"@/models/Item\";\nimport $store from '@/store/index.js';\nimport { useToast } from \"vue-toastification\";\nimport { characterService } from \"./CharacterService\";\nimport { monstersService } from \"./MonstersService\";\n\nclass ItemsService {\n  constructor() {\n    _defineProperty(this, \"toast\", useToast());\n  }\n\n  randomItemDrop() {\n    let dropChance = Math.ceil(Math.random() * 100);\n    let partyLuck = 1 + $store.state.location + characterService.getPartyLuck();\n\n    if (partyLuck > dropChance) {\n      let item = this.findRandomItem();\n      let creatureDropIndex = Math.floor(Math.random() * $store.state.combatMonsters.length);\n      $store.state.combatMonsters[creatureDropIndex].equipment.push(item.name);\n      monstersService.addItemStats($store.state.combatMonsters[creatureDropIndex], item.name);\n      $store.state.combatMonsters[creatureDropIndex].hp = $store.state.combatMonsters[creatureDropIndex].baseHp;\n    }\n  }\n\n  findRandomItem(rarity = false) {\n    // c 79.74% un 15% r 5% vr .25% l .01%\n    const rarityDictionary = {\n      c: 7974,\n      uc: 9474,\n      r: 9974,\n      vr: 9999,\n      l: 10000\n    };\n    let partyLuck = 1 + $store.state.location + characterService.getPartyLuck();\n    let dropRarity = rarity ? rarityDictionary[rarity] : Math.ceil(Math.random() * 10000) + partyLuck;\n\n    for (let r in rarityDictionary) {\n      if (rarityDictionary[r] >= dropRarity) {\n        dropRarity = r;\n      }\n    }\n\n    let possibleItems = $store.state.items.filter(i => i.rarity == dropRarity);\n    let index = Math.ceil(Math.random() * possibleItems.length - 1);\n    return possibleItems[index];\n  }\n\n  getStoreItems() {\n    let itemCount = 10 + Math.ceil(Math.random() * 15);\n    let storeItems = [];\n\n    for (let i = 0; i < itemCount; i++) {\n      storeItems.push(this.findRandomItem());\n    }\n\n    return storeItems.sort((a, b) => a.price - b.price);\n  }\n\n  equipItem(character, item) {\n    $store.message = '';\n\n    if (!this.checkItemReqs(character, item)) {\n      this.toast.warning($store.message);\n      return;\n    }\n\n    $store.message = ''; // auto unequip\n\n    character.equipment.forEach(e => {\n      if (e.type == item.type) {\n        this.unequipItem(character, e);\n      }\n    });\n\n    if (item.set) {\n      characterService.removeSetBonuses(character);\n    }\n\n    let index = $store.state.player.items.indexOf(item);\n    $store.state.player.items.splice(index, 1);\n    character.equipment.push(item);\n    characterService.addItemStats(character, item);\n\n    if (item.set) {\n      characterService.addSetBonuses(character);\n    }\n\n    this.unequipReqMissingItems(character);\n  }\n\n  unequipItem(character, item) {\n    // method here is to remove all set bonuses and re-add them when changing set items\n    if (item.set) {\n      characterService.removeSetBonuses(character);\n    }\n\n    let index = character.equipment.indexOf(item);\n    character.equipment.splice(index, 1);\n    $store.state.player.items.push(item);\n    characterService.removeItemStats(character, item);\n    this.unequipReqMissingItems(character);\n\n    if (item.set) {\n      characterService.addSetBonuses(character);\n    }\n  }\n\n  sellItem(item) {\n    let index = $store.state.player.items.indexOf(item);\n    $store.state.player.items.splice(index, 1);\n    $store.state.player.gold += item.price / 10;\n  }\n\n  buyItem(item) {\n    $store.state.player.items.push(new Item(item));\n    let index = $store.state.shopItems.findIndex(si => si.name == item.name);\n    $store.state.shopItems.splice(index, 1);\n  }\n\n  checkItemReqs(character, item) {\n    let canEquip = true;\n\n    if (!item?.requirements) {\n      return canEquip;\n    }\n\n    item.requirements.forEach(r => {\n      if (Array.isArray(r.req)) {\n        canEquip = this.checkMultiReqs(character, r);\n      } else {\n        canEquip = this.checkSingleReq(character, r);\n      }\n    });\n    return canEquip;\n  }\n\n  checkMultiReqs(character, reqs) {\n    let pass = false;\n    reqs.req.forEach(r => {\n      if (Array.isArray(character[r.stat])) {\n        pass = this.checkSingleReq(character, reqs);\n      } else if (character[reqs.stat].includes(r) || character[reqs.stat] >= r) {\n        pass = true;\n      }\n    });\n    return pass;\n  }\n\n  checkSingleReq(character, r) {\n    let pass = false;\n\n    if (Array.isArray(character[r.stat])) {\n      character[r.stat].forEach(s => {\n        if (typeof s === \"object\") {\n          if (s.name.includes(r.req)) {\n            pass = true;\n          }\n        } else if (s.includes(r.req) || s >= r.req) {\n          pass = true;\n        }\n      });\n    } else if (character[r.stat] >= r.req) {\n      pass = true;\n    }\n\n    if (!pass) {\n      $store.message += ' requires ' + r.stat.replace(/([A-Z])/g, \" $1\") + ' to be ' + r.req;\n    }\n\n    return pass;\n  }\n\n  unequipReqMissingItems(character) {\n    character.equipment.forEach(e => {\n      if (!this.checkItemReqs(character, e)) {\n        this.unequipItem(character, e);\n      }\n    });\n  }\n\n  useConsumableItem(item, character) {\n    if (Array.isArray(item.effect)) {\n      item.effect.forEach((e, index) => {\n        this.doItemEffect(e, item.value[index], character);\n      });\n    } else {\n      this.doItemEffect(item.effect, item.value, character);\n    }\n\n    let index = $store.state.player.items.findIndex(i => i.id == item.id);\n    $store.state.player.items.splice(index, 1);\n    this.toast.success(character.name + ' ' + this.getItemEffectsDisplay(item));\n  }\n\n  doItemEffect(effect, value, character) {\n    if (effect == 'statusEffects') {\n      let seIndex = character.statusEffects.findIndex(se => se.name == value && se.negative);\n      character.statusEffects.splice(seIndex, 1);\n    } else {\n      character[effect] += value;\n    }\n  }\n\n  getItemEffectsDisplay(item) {\n    let display = '';\n\n    if (Array.isArray(item.effect)) {\n      for (let i = 0; i < item.effect.length; i++) {\n        let operator = item.value[i] <= 0 ? '' : '+';\n        display += i > 0 ? ' | ' : '';\n        display += item.effect[i].replace(/([A-Z])/g, \" $1\");\n\n        if (typeof item.value[i] == 'object') {\n          display += ' +' + item.value[i].name + ' + ' + item.value[i].chance + '% ';\n        } else {\n          display += operator + item.value[i] + ' ';\n        }\n      }\n    } else {\n      let operator = item.value <= 0 ? '' : '+';\n      display = item.effect.replace(/([A-Z])/g, \" $1\");\n\n      if (typeof item.value == 'object') {\n        display += item.value.name + ' + ' + item.value.chance + '% ';\n      } else {\n        display += operator + item.value + ' ';\n      }\n    }\n\n    display += item.speed ? '| speed ' + item.speed : '';\n    return display;\n  }\n\n}\n\nexport const itemsService = new ItemsService();","map":{"version":3,"sources":["C:/Users/dhild/source/mini-projects/blades-of-desolation/src/services/ItemsService.js"],"names":["Item","$store","useToast","characterService","monstersService","ItemsService","randomItemDrop","dropChance","Math","ceil","random","partyLuck","state","location","getPartyLuck","item","findRandomItem","creatureDropIndex","floor","combatMonsters","length","equipment","push","name","addItemStats","hp","baseHp","rarity","rarityDictionary","c","uc","r","vr","l","dropRarity","possibleItems","items","filter","i","index","getStoreItems","itemCount","storeItems","sort","a","b","price","equipItem","character","message","checkItemReqs","toast","warning","forEach","e","type","unequipItem","set","removeSetBonuses","player","indexOf","splice","addSetBonuses","unequipReqMissingItems","removeItemStats","sellItem","gold","buyItem","shopItems","findIndex","si","canEquip","requirements","Array","isArray","req","checkMultiReqs","checkSingleReq","reqs","pass","stat","includes","s","replace","useConsumableItem","effect","doItemEffect","value","id","success","getItemEffectsDisplay","seIndex","statusEffects","se","negative","display","operator","chance","speed","itemsService"],"mappings":"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","sourcesContent":["import { Item } from \"@/models/Item\"\r\nimport $store from '@/store/index.js'\r\nimport { useToast } from \"vue-toastification\"\r\nimport { characterService } from \"./CharacterService\"\r\nimport { monstersService } from \"./MonstersService\"\r\nclass ItemsService{\r\n  toast = useToast()\r\n  randomItemDrop(){\r\n    let dropChance = Math.ceil(Math.random()*100)\r\n    let partyLuck = 1+$store.state.location+characterService.getPartyLuck()\r\n    if(partyLuck > dropChance){\r\n      let item = this.findRandomItem()\r\n      let creatureDropIndex = Math.floor(Math.random()*$store.state.combatMonsters.length)\r\n      $store.state.combatMonsters[creatureDropIndex].equipment.push(item.name)\r\n      monstersService.addItemStats($store.state.combatMonsters[creatureDropIndex], item.name)\r\n      $store.state.combatMonsters[creatureDropIndex].hp = $store.state.combatMonsters[creatureDropIndex].baseHp\r\n    }\r\n  }\r\n  findRandomItem(rarity = false){\r\n    // c 79.74% un 15% r 5% vr .25% l .01%\r\n    const rarityDictionary = {c: 7974, uc: 9474, r: 9974, vr: 9999, l: 10000}\r\n    let partyLuck = 1+$store.state.location+characterService.getPartyLuck()\r\n    let dropRarity = rarity ? rarityDictionary[rarity] : Math.ceil(Math.random()*10000)+partyLuck\r\n    \r\n    for(let r in rarityDictionary){\r\n      if(rarityDictionary[r] >= dropRarity){\r\n        dropRarity = r\r\n      }\r\n    }\r\n    let possibleItems = $store.state.items.filter(i => i.rarity == dropRarity)\r\n    let index = Math.ceil(Math.random()*possibleItems.length-1)\r\n    return possibleItems[index]\r\n  }\r\n  getStoreItems(){\r\n    let itemCount = 10+Math.ceil(Math.random()*15)\r\n    let storeItems = []\r\n    for(let i=0; i<itemCount; i++){\r\n      storeItems.push(this.findRandomItem())\r\n    }\r\n    return storeItems.sort((a,b)=> a.price - b.price)\r\n  }\r\n  equipItem(character, item){\r\n    $store.message = ''\r\n    if(!this.checkItemReqs(character, item)){\r\n      this.toast.warning($store.message)\r\n      return\r\n    }\r\n    $store.message = ''\r\n    \r\n    // auto unequip\r\n    character.equipment.forEach(e => {\r\n      if(e.type == item.type){\r\n        this.unequipItem(character, e)\r\n      }\r\n    })\r\n    if(item.set){\r\n      characterService.removeSetBonuses(character)\r\n    }\r\n    let index = $store.state.player.items.indexOf(item)\r\n    $store.state.player.items.splice(index, 1)\r\n    character.equipment.push(item)\r\n    characterService.addItemStats(character, item)\r\n    if(item.set){\r\n      characterService.addSetBonuses(character)\r\n    }\r\n    this.unequipReqMissingItems(character)\r\n  }\r\n  unequipItem(character, item){\r\n    // method here is to remove all set bonuses and re-add them when changing set items\r\n    if(item.set){\r\n      characterService.removeSetBonuses(character)\r\n    }\r\n    let index = character.equipment.indexOf(item)\r\n    character.equipment.splice(index, 1)\r\n    $store.state.player.items.push(item)\r\n    characterService.removeItemStats(character, item)\r\n    this.unequipReqMissingItems(character)\r\n    if(item.set){\r\n      characterService.addSetBonuses(character)\r\n    }\r\n  }\r\n  sellItem(item){\r\n    let index = $store.state.player.items.indexOf(item)\r\n    $store.state.player.items.splice(index, 1)\r\n    $store.state.player.gold += item.price/10\r\n  }\r\n  buyItem(item){\r\n    $store.state.player.items.push(new Item(item))\r\n    let index = $store.state.shopItems.findIndex(si => si.name == item.name)\r\n    $store.state.shopItems.splice(index, 1)\r\n  }\r\n  checkItemReqs(character, item){\r\n    let canEquip = true\r\n    \r\n    if(!item?.requirements){\r\n      return canEquip\r\n    }\r\n    item.requirements.forEach(r => {\r\n      if(Array.isArray(r.req)){\r\n        canEquip = this.checkMultiReqs(character, r)\r\n      }else{\r\n        canEquip = this.checkSingleReq(character, r)\r\n      }\r\n    })\r\n    return canEquip\r\n  }\r\n  checkMultiReqs(character, reqs){\r\n    let pass = false\r\n    reqs.req.forEach(r => {\r\n      if(Array.isArray(character[r.stat])){\r\n        pass = this.checkSingleReq(character, reqs)\r\n      }else if(character[reqs.stat].includes(r) || character[reqs.stat] >= r){\r\n        pass = true\r\n      }\r\n    })\r\n    return pass\r\n  }\r\n  checkSingleReq(character, r){\r\n    let pass = false\r\n    if(Array.isArray(character[r.stat])){\r\n      character[r.stat].forEach(s => {\r\n        if(typeof s === \"object\"){\r\n          if(s.name.includes(r.req)){\r\n            pass = true\r\n          }\r\n        }\r\n        else if(s.includes(r.req) || s >= r.req){\r\n          pass = true\r\n        }\r\n      })\r\n    }else if(character[r.stat] >= r.req){\r\n        pass = true\r\n    }\r\n    if(!pass){\r\n      $store.message += ' requires '+r.stat.replace(/([A-Z])/g, \" $1\")+' to be '+r.req\r\n    }\r\n    return pass\r\n  }\r\n  unequipReqMissingItems(character){\r\n    character.equipment.forEach(e => {\r\n      if(!this.checkItemReqs(character, e)){\r\n        this.unequipItem(character, e)\r\n      }\r\n    })\r\n  }\r\n  useConsumableItem(item, character){\r\n    if(Array.isArray(item.effect)){\r\n      item.effect.forEach((e, index) => {\r\n        this.doItemEffect(e, item.value[index], character)\r\n      })\r\n    }else{\r\n      this.doItemEffect(item.effect, item.value, character)\r\n    }\r\n    let index = $store.state.player.items.findIndex(i => i.id == item.id)\r\n    $store.state.player.items.splice(index, 1)\r\n    this.toast.success(character.name+' '+this.getItemEffectsDisplay(item))\r\n  }\r\n  doItemEffect(effect, value, character){\r\n    if(effect == 'statusEffects'){\r\n      let seIndex = character.statusEffects.findIndex(se => se.name == value && se.negative)\r\n      character.statusEffects.splice(seIndex, 1)\r\n    }else{\r\n      character[effect] += value\r\n    }\r\n  }\r\n  getItemEffectsDisplay(item){\r\n    let display = ''\r\n    if(Array.isArray(item.effect)){\r\n      for(let i=0; i<item.effect.length; i++){\r\n        let operator = item.value[i] <= 0 ? '' : '+'\r\n        display += i > 0 ? ' | ' : ''\r\n        display += item.effect[i].replace(/([A-Z])/g, \" $1\")\r\n        if(typeof item.value[i] == 'object'){\r\n          display += ' +'+item.value[i].name+' + '+item.value[i].chance+'% '\r\n        }else{\r\n          display += operator+item.value[i]+' '\r\n        }\r\n      }\r\n    }else{\r\n      let operator = item.value <= 0 ? '' : '+'\r\n      display = item.effect.replace(/([A-Z])/g, \" $1\")\r\n      if(typeof item.value == 'object'){\r\n        display += item.value.name+' + '+item.value.chance+'% '\r\n      }else{\r\n        display += operator+item.value+' '\r\n      }\r\n    }\r\n    display += item.speed ? '| speed '+item.speed : ''\r\n    return display\r\n  }\r\n}\r\n\r\nexport const itemsService = new ItemsService()"]},"metadata":{},"sourceType":"module"}