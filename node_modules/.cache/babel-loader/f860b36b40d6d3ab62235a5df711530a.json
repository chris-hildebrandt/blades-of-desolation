{"ast":null,"code":"import Swal from '../../node_modules/sweetalert2/src/sweetalert2.js';\nimport $store from '@/store/index';\nimport { spellsService } from \"@/services/SpellsService.js\";\nexport default class Notify {\n  /**\r\n  *\r\n  * @param {string} title The title text.\r\n  * @param {string} text The body text.\r\n  * @param {string} icon 'success', 'error', 'info', 'warning', or 'question'.\r\n  * @param {string} confirmButtonText The text of your confirm button.\r\n  * -----------------------------------\r\n  * {@link https://sweetalert2.github.io/#configuration|Check out Sweet Alerts}\r\n  */\n  static async confirm(title = 'New Quest', text = \"Mysterious\", icon = 'question', confirmButtonText = 'Yes, Accept!') {\n    try {\n      const res = await Swal.fire({\n        title: title,\n        text: text,\n        icon: icon,\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: confirmButtonText\n      });\n\n      if (res.isConfirmed) {\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  static async selectChar(title = 'Learn spell', cost = 1000, description = '') {\n    try {\n      const res = await Swal.fire({\n        title: 'Learn ' + title,\n        text: description,\n        input: 'select',\n        inputOptions: getCharOptions(title),\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Learn Spell(' + cost + '<i class=\"fad fa-coins\"></i>)'\n      });\n\n      if (res.isConfirmed) {\n        return res.value;\n      }\n\n      return false;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  static async cheat() {\n    try {\n      const res = await Swal.fire({\n        input: 'text',\n        confirmButtonColor: '#3085d6',\n        confirmButtonText: '???'\n      });\n\n      if (res.isConfirmed) {\n        return res.value;\n      }\n\n      return false;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  static async selectTarget(title = 'Select Target', confirmText = 'Cast Spell') {\n    try {\n      const res = await Swal.fire({\n        title: title,\n        input: 'select',\n        inputOptions: getTargetOptions(),\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: confirmText\n      });\n\n      if (res.isConfirmed) {\n        return res.value;\n      }\n\n      return false;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  static async selectOptions(options = {\n    baseHp: 'Hp',\n    baseStrength: 'Strength',\n    baseActions: 'Actions'\n  }, title = 'Level Up', text = 'Select a option to improve.', btnText = 'Improve stat!') {\n    try {\n      const res = await Swal.fire({\n        title: title,\n        text: text,\n        input: 'select',\n        inputOptions: options,\n        confirmButtonColor: '#3085d6',\n        confirmButtonText: btnText\n      });\n\n      if (res.isConfirmed) {\n        return res.value;\n      }\n\n      return false;\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\r\n  *\r\n  * @param {string} title The title text\r\n  * @param {string} display 'success', 'error', 'info', 'warning', or 'question'.\r\n  * @param {string} position 'top', 'top-start', 'top-end', 'center', 'center-start', 'center-end', 'bottom', 'bottom-start', or 'bottom-end'.\r\n  * @param {number} timer Time in milliseconds.\r\n  * @param {boolean} progressBar Show progress bar or not respectively.\r\n  * -----------------------------------\r\n  * {@link https://sweetalert2.github.io/#configuration|Check out Sweet Alerts}\r\n  */\n\n\n  static toast(title = 'Warning!', display = 'warning', position = 'center-end', timer = 5000, progressBar = true) {\n    Swal.fire({\n      title: title,\n      icon: display,\n      position: position,\n      timer: timer,\n      timerProgressBar: progressBar,\n      toast: true,\n      showConfirmButton: false\n    });\n  }\n\n}\n\nfunction getCharOptions(spellName) {\n  let options = {};\n  let chars = $store.state.player.characters.filter(c => spellsService.canLearnSpell(spellName, c));\n\n  if (chars.length < 1) {\n    return {\n      0: 'No one can learn this spell'\n    };\n  }\n\n  chars.forEach(c => {\n    options[c.id] = c.name;\n  });\n  return options;\n}\n\nfunction getTargetOptions() {\n  let options = {};\n  let monsters = $store.state.combatMonsters;\n  let chars = $store.state.player.characters;\n  monsters.forEach(m => {\n    options[m.id] = m.name;\n  });\n  chars.forEach(c => {\n    options[c.id] = c.name;\n  });\n  return options;\n}","map":{"version":3,"sources":["C:/Users/dhild/source/mini-projects/blades-of-desolation/src/utils/Notify.js"],"names":["Swal","$store","spellsService","Notify","confirm","title","text","icon","confirmButtonText","res","fire","showCancelButton","confirmButtonColor","cancelButtonColor","isConfirmed","error","selectChar","cost","description","input","inputOptions","getCharOptions","value","cheat","selectTarget","confirmText","getTargetOptions","selectOptions","options","baseHp","baseStrength","baseActions","btnText","toast","display","position","timer","progressBar","timerProgressBar","showConfirmButton","spellName","chars","state","player","characters","filter","c","canLearnSpell","length","forEach","id","name","monsters","combatMonsters","m"],"mappings":"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","sourcesContent":["import Swal from '../../node_modules/sweetalert2/src/sweetalert2.js'\r\nimport $store from '@/store/index'\r\nimport { spellsService } from \"@/services/SpellsService.js\"\r\nexport default class Notify {\r\n  /**\r\n *\r\n * @param {string} title The title text.\r\n * @param {string} text The body text.\r\n * @param {string} icon 'success', 'error', 'info', 'warning', or 'question'.\r\n * @param {string} confirmButtonText The text of your confirm button.\r\n * -----------------------------------\r\n * {@link https://sweetalert2.github.io/#configuration|Check out Sweet Alerts}\r\n */\r\n  static async confirm(title = 'New Quest', text = \"Mysterious\", icon = 'question', confirmButtonText = 'Yes, Accept!') {\r\n    try {\r\n      const res = await Swal.fire({\r\n        title: title,\r\n        text: text,\r\n        icon: icon,\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n        confirmButtonText: confirmButtonText\r\n      })\r\n      if (res.isConfirmed) {\r\n        return true\r\n      }\r\n      return false\r\n    } catch (error) {\r\n      return false\r\n    }\r\n  }\r\n  static async selectChar(title = 'Learn spell', cost = 1000, description = '') {\r\n    try {\r\n      const res = await Swal.fire({\r\n        title: 'Learn '+title,\r\n        text: description,\r\n        input: 'select',\r\n        inputOptions: getCharOptions(title),\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n        confirmButtonText: 'Learn Spell('+cost+'<i class=\"fad fa-coins\"></i>)'\r\n      })\r\n      if (res.isConfirmed) {\r\n        return res.value\r\n      }\r\n      return false\r\n    } catch (error) {\r\n      return false\r\n    }\r\n  }\r\n  static async cheat() {\r\n    try {\r\n      const res = await Swal.fire({\r\n        input: 'text',\r\n        confirmButtonColor: '#3085d6',\r\n        confirmButtonText: '???'\r\n      })\r\n      if (res.isConfirmed) {\r\n        return res.value\r\n      }\r\n      return false\r\n    } catch (error) {\r\n      return false\r\n    }\r\n  }\r\n  static async selectTarget(title = 'Select Target', confirmText = 'Cast Spell') {\r\n    try {\r\n      const res = await Swal.fire({\r\n        title: title,\r\n        input: 'select',\r\n        inputOptions: getTargetOptions(),\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n        confirmButtonText: confirmText\r\n      })\r\n      if (res.isConfirmed) {\r\n        return res.value\r\n      }\r\n      return false\r\n    } catch (error) {\r\n      return false\r\n    }\r\n  }\r\n\r\n    static async selectOptions(options = {baseHp: 'Hp', baseStrength: 'Strength', baseActions: 'Actions'}, title = 'Level Up', text = 'Select a option to improve.', btnText = 'Improve stat!') {\r\n      try {\r\n        const res = await Swal.fire({\r\n          title: title,\r\n          text: text,\r\n          input: 'select',\r\n          inputOptions: options,\r\n          confirmButtonColor: '#3085d6',\r\n          confirmButtonText: btnText\r\n        })\r\n        if (res.isConfirmed) {\r\n          return res.value\r\n        }\r\n        return false\r\n      } catch (error) {\r\n        return false\r\n      }\r\n    }\r\n\r\n  /**\r\n *\r\n * @param {string} title The title text\r\n * @param {string} display 'success', 'error', 'info', 'warning', or 'question'.\r\n * @param {string} position 'top', 'top-start', 'top-end', 'center', 'center-start', 'center-end', 'bottom', 'bottom-start', or 'bottom-end'.\r\n * @param {number} timer Time in milliseconds.\r\n * @param {boolean} progressBar Show progress bar or not respectively.\r\n * -----------------------------------\r\n * {@link https://sweetalert2.github.io/#configuration|Check out Sweet Alerts}\r\n */\r\n  static toast(title = 'Warning!', display = 'warning', position = 'center-end', timer = 5000, progressBar = true) {\r\n    Swal.fire({\r\n      title: title,\r\n      icon: display,\r\n      position: position,\r\n      timer: timer,\r\n      timerProgressBar: progressBar,\r\n      toast: true,\r\n      showConfirmButton: false\r\n    })\r\n  }\r\n}\r\n\r\nfunction getCharOptions(spellName){\r\n  let options = {}\r\n  let chars = $store.state.player.characters.filter(c => spellsService.canLearnSpell(spellName, c))\r\n  if(chars.length < 1){\r\n    return {0:'No one can learn this spell'}\r\n  }\r\n  chars.forEach(c => {\r\n    options[c.id] = c.name\r\n  })\r\n  return options\r\n}\r\nfunction getTargetOptions(){\r\n  let options = {}\r\n  let monsters = $store.state.combatMonsters\r\n  let chars = $store.state.player.characters\r\n  monsters.forEach(m => {\r\n    options[m.id] = m.name\r\n  })\r\n  chars.forEach(c => {\r\n    options[c.id] = c.name\r\n  })\r\n  return options\r\n}"]},"metadata":{},"sourceType":"module"}