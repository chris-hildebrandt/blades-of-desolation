{"ast":null,"code":"import $store from '@/store/index.js';\nimport { animationsService } from \"./AnimationsService\";\nimport { battleService } from \"./BattleService\";\nimport { characterService } from \"./CharacterService\";\nimport { sleep } from \"../utils/sleep\";\nimport $ from \"jquery\";\n\nclass MonstersService {\n  takeTurn() {\n    this.prepPhase();\n    this.attackPhase();\n  }\n\n  prepPhase() {\n    this.resetActions();\n    this.triggerStatusEffects();\n  }\n\n  attackPhase() {\n    let numTargets = $store.state.player.characters.filter(c => c.inBattle).length;\n    let delay = 1000;\n    $('#app').css('pointer-events', 'none');\n    $('*').css('cursor', 'progress');\n    $store.state.combatMonsters.forEach(m => {\n      if (m.actions <= 0 || m.hp <= 0) {\n        return;\n      }\n\n      for (m.actions; m.actions > 0; m.actions--) {\n        sleep(delay).then(() => {\n          if (m.hp > 0) {\n            animationsService.pounce('monster' + m.id);\n            let target = $store.state.player.characters.filter(c => c.inBattle)[Math.floor(Math.random() * numTargets)];\n            battleService.handleAttack(m, target);\n          }\n        });\n        delay += 1000;\n      }\n    });\n    setTimeout(() => {\n      $('#app').css('pointer-events', '');\n      $('*').css('cursor', '');\n      this.endPhase();\n    }, delay);\n  }\n\n  endPhase() {\n    clearInterval($store.state.timerInterval);\n    this.regen();\n    characterService.takeTurn();\n  }\n\n  regen() {\n    $store.state.combatMonsters.forEach(m => {\n      if (m.regen > 0) {\n        animationsService.fadeOutUp('hit' + m.id, m.regen, '+');\n        m.hp += m.regen;\n      }\n    });\n  }\n\n  triggerStatusEffects() {\n    $store.state.combatMonsters.forEach(cm => {\n      cm.statusEffects.forEach(se => {\n        if (!se.negative || typeof se.value !== 'number') {\n          return;\n        }\n\n        cm[se.effect] = se.value > 0 ? cm[se.effect] - se.value : se.value;\n\n        if (se.effect == 'hp') {\n          animationsService.fadeOutUp('hit' + cm.id, se.value, '-');\n        }\n      });\n    });\n  }\n\n  resetActions() {\n    $store.state.combatMonsters.forEach(m => {\n      if (m.hp > 0) {\n        m.actions = m.baseActions;\n      }\n    });\n  }\n\n  addItemStats(monster, itemName) {\n    $store.commit('addStatsToMonster', {\n      monsterId: monster.id,\n      item: itemName\n    });\n  }\n\n  getMonsterById(id) {\n    return $store.state.combatMonsters.find(m => m.id == id);\n  }\n\n}\n\nexport const monstersService = new MonstersService();","map":{"version":3,"sources":["C:/Users/dhild/source/mini-projects/blades-of-desolation/src/services/MonstersService.js"],"names":["$store","animationsService","battleService","characterService","sleep","$","MonstersService","takeTurn","prepPhase","attackPhase","resetActions","triggerStatusEffects","numTargets","state","player","characters","filter","c","inBattle","length","delay","css","combatMonsters","forEach","m","actions","hp","then","pounce","id","target","Math","floor","random","handleAttack","setTimeout","endPhase","clearInterval","timerInterval","regen","fadeOutUp","cm","statusEffects","se","negative","value","effect","baseActions","addItemStats","monster","itemName","commit","monsterId","item","getMonsterById","find","monstersService"],"mappings":"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","sourcesContent":["import $store from '@/store/index.js'\r\nimport { animationsService } from \"./AnimationsService\"\r\nimport { battleService } from \"./BattleService\"\r\nimport { characterService } from \"./CharacterService\"\r\nimport { sleep } from \"../utils/sleep\"\r\nimport $ from \"jquery\"\r\nclass MonstersService {\r\n  takeTurn() {\r\n    this.prepPhase()\r\n    this.attackPhase()\r\n  }\r\n  prepPhase() {\r\n    this.resetActions()\r\n    this.triggerStatusEffects()\r\n  }\r\n  attackPhase() {\r\n    let numTargets = $store.state.player.characters.filter(c => c.inBattle).length\r\n    let delay = 1000\r\n    $('#app').css('pointer-events', 'none')\r\n    $('*').css('cursor', 'progress')\r\n    $store.state.combatMonsters.forEach(m => {\r\n      if (m.actions <= 0 || m.hp <= 0) {\r\n        return\r\n      }\r\n      for (m.actions; m.actions > 0; m.actions--) {\r\n        sleep(delay).then(() => {\r\n          if(m.hp > 0){\r\n            animationsService.pounce('monster' + m.id)\r\n            let target = $store.state.player.characters.filter(c => c.inBattle)[Math.floor(Math.random() * numTargets)]\r\n            battleService.handleAttack(m, target)\r\n          }\r\n        })\r\n        delay += 1000\r\n      }\r\n    })\r\n    setTimeout(()=>{\r\n      $('#app').css('pointer-events', '')\r\n      $('*').css('cursor', '')\r\n      this.endPhase()\r\n    }, delay)\r\n  }\r\n  endPhase() {\r\n    clearInterval($store.state.timerInterval)\r\n    this.regen()\r\n    characterService.takeTurn()\r\n  }\r\n  regen() {\r\n    $store.state.combatMonsters.forEach(m => {\r\n      if (m.regen > 0) {\r\n        animationsService.fadeOutUp('hit' + m.id, m.regen, '+')\r\n        m.hp += m.regen\r\n      }\r\n    })\r\n  }\r\n  triggerStatusEffects(){\r\n    $store.state.combatMonsters.forEach(cm => {\r\n      cm.statusEffects.forEach(se => {\r\n        if(!se.negative || typeof se.value !== 'number'){return}\r\n        cm[se.effect] = se.value > 0 ? cm[se.effect] - se.value : se.value\r\n        if(se.effect == 'hp'){\r\n          animationsService.fadeOutUp('hit'+cm.id, se.value, '-')\r\n        }\r\n      })\r\n    })\r\n  }\r\n  resetActions() {\r\n    $store.state.combatMonsters.forEach(m => {\r\n      if (m.hp > 0) {\r\n        m.actions = m.baseActions\r\n      }\r\n    })\r\n  }\r\n  addItemStats(monster, itemName) {\r\n    $store.commit('addStatsToMonster', { monsterId: monster.id, item: itemName })\r\n  }\r\n  getMonsterById(id) {\r\n    return $store.state.combatMonsters.find(m => m.id == id)\r\n  }\r\n}\r\nexport const monstersService = new MonstersService()"]},"metadata":{},"sourceType":"module"}