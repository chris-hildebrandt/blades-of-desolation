{"ast":null,"code":"import _defineProperty from \"C:/Users/dhild/source/mini-projects/blades-of-desolation/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Character } from \"@/models/Character\";\nimport $store from '@/store/index.js';\nimport { getRandomAbility } from \"@/utils/getRandomAbility\";\nimport { useToast } from \"vue-toastification\";\nimport { animationsService } from \"./AnimationsService\";\nimport { gameService } from \"./GameService\";\nimport { monstersService } from \"./MonstersService\";\nimport { spellsService } from \"./SpellsService\";\nimport { setBonus } from \"@/utils/setBonus\";\nimport { itemsService } from \"./ItemsService\";\n\nclass CharacterService {\n  constructor() {\n    _defineProperty(this, \"toast\", useToast());\n  }\n\n  getCharacterById(id) {\n    return $store.state.player.characters.find(c => c.id == id);\n  }\n\n  takeTurn() {\n    this.prepPhase();\n    this.attackPhase();\n  }\n\n  prepPhase() {\n    if ($store.state.combatMonsters.filter(m => m.hp > 0).length > 0) {\n      gameService.setTimer();\n    }\n\n    this.removeDestroyedCharacters();\n    this.resetActions();\n    this.triggerStatusEffects();\n    this.autoSelect();\n  }\n\n  attackPhase() {}\n\n  endPhase() {\n    clearInterval($store.state.timerInterval);\n    $store.state.timer = 10000 * $store.state.player.characters.length;\n    this.regen();\n    this.magicRegen();\n    $store.state.selected = '';\n    this.resetExtraStats();\n    monstersService.takeTurn();\n  }\n\n  resetActions() {\n    $store.state.player.characters.forEach(c => {\n      c.actions = c.actions >= 0 ? c.baseActions : c.actions + c.baseActions;\n    });\n  }\n\n  resetExtraStats() {\n    $store.state.player.characters.forEach(c => {\n      if (c.hp > c.baseHp) {\n        c.hp = c.baseHp;\n      }\n\n      if (c.magic > c.baseMagic) {\n        c.magic = c.baseMagic;\n      }\n    });\n  }\n\n  getAverageCharacterLvl() {\n    let totalLvl = 0;\n    $store.state.player.characters.forEach(c => totalLvl += c.level);\n\n    if (totalLvl) {\n      return Math.floor(totalLvl / $store.state.player.characters.length);\n    }\n\n    return totalLvl;\n  }\n\n  getPartyLuck() {\n    let luck = 0;\n    $store.state.player.characters.forEach(c => luck += c.luck);\n    return luck;\n  }\n\n  removeDestroyedCharacters() {\n    $store.state.player.characters.forEach(c => {\n      if (c.hp < c.baseHp * -2) {\n        $store.commit('destroyCharacter', c.id);\n        this.toast.error(c.name + ' was destroyed');\n      }\n    });\n  }\n\n  autoSelect() {\n    if ($store.state.selected?.hp > 0 && $store.state.selected?.actions > 0) {\n      return;\n    }\n\n    $store.state.player.characters.forEach(c => {\n      if (c.actions > 0 && c.hp > 0 && c.inBattle) {\n        $store.state.selected = c;\n        return;\n      }\n    });\n  }\n\n  regen() {\n    $store.state.player.characters.forEach(c => {\n      if (c.regen > 0 ?? c.inBattle) {\n        animationsService.fadeOutUp('hit' + c.id, c.regen, '+');\n        c.hp += c.regen;\n      }\n    });\n  }\n\n  magicRegen() {\n    $store.state.player.characters.forEach(c => {\n      if (c.magicRegen > 0 ?? c.inBattle) {\n        c.magic += c.magicRegen;\n        c.magic = c.magic > c.baseMagic ? c.baseMagic : c.magic;\n      }\n    });\n  }\n\n  triggerStatusEffects() {\n    $store.state.player.characters.forEach(c => {\n      c.statusEffects.forEach(se => {\n        if (!se.negative || typeof se.value !== 'number') {\n          return;\n        }\n\n        c[se.effect] = se.value > 0 ? c[se.effect] - se.value : se.value;\n\n        if (se.effect == 'hp') {\n          animationsService.fadeOutUp('hit' + c.id, se.value, '-', 'poison');\n        }\n      });\n    });\n  }\n\n  attemptToFlee(character) {\n    let enemies = $store.state.combatMonsters.filter(m => m.hp > 0).length;\n    let party = $store.state.player.characters.filter(c => c.inBattle).length;\n    let chance = party == enemies ? .5 : party / enemies;\n    chance += character.luck / 100;\n    let fail = Math.random();\n\n    if (chance > fail) {\n      character.inBattle = false;\n      this.toast.success(character.name + ' got away');\n    } else {\n      this.toast.error('Failed to escape');\n    }\n  }\n\n  enterBattle() {\n    $store.state.player.characters.forEach(c => c.inBattle = true);\n  }\n\n  addItemStats(character, item) {\n    $store.commit('equipItem', {\n      characterId: character.id,\n      item: item\n    });\n  }\n\n  removeItemStats(character, item) {\n    $store.commit('unequipItem', {\n      characterId: character.id,\n      item: item\n    });\n  }\n\n  addSetBonuses(character) {\n    let setCounts = {};\n    character.equipment.forEach(item => {\n      if (item.set) {\n        setCounts[item.set] = setCounts[item.set] > 0 ? setCounts[item.set] + 1 : 1;\n      }\n    });\n\n    for (let set in setCounts) {\n      if (setCounts[set] > 1) {\n        for (let i = 0; i < setCounts[set] - 1; i++) {\n          this.addItemStats(character, setBonus[set][i]);\n          character.sets.push(itemsService.getItemEffectsDisplay(setBonus[set][i]));\n        }\n      }\n    }\n  }\n\n  removeSetBonuses(character) {\n    let setCounts = {};\n    character.equipment.forEach(item => {\n      if (item.set) {\n        setCounts[item.set] = setCounts[item.set] > 0 ? setCounts[item.set] + 1 : 1;\n      }\n    });\n\n    for (let set in setCounts) {\n      if (setCounts[set] > 1) {\n        character.sets = [];\n\n        for (let i = 0; i < setCounts[set] - 1; i++) {\n          this.removeItemStats(character, setBonus[set][i]);\n        }\n      }\n    }\n  }\n\n  loadCharacter(index, char) {\n    $store.state.player.characters[index] = new Character(char);\n  }\n\n  createCharacter(char) {\n    let spell = false;\n\n    switch (char.classType) {\n      case 'rogue':\n        if (char.name == 'Royce') {\n          char[\"strength\"] += 2;\n          char[\"hp\"] += 5;\n        }\n\n        char[\"strength\"]++;\n        char[\"actions\"]++;\n        char[\"dodge\"] += 5;\n        break;\n\n      case 'ranger':\n        if (char.name == 'Aragorn') {\n          char[\"regen\"] = 2;\n        }\n\n        char[\"strength\"]++;\n        char[\"actions\"]++;\n        char[\"hp\"] += 5;\n        break;\n\n      case 'bard':\n        if (char.name == 'Thom') {\n          char[\"luck\"] += 5;\n        }\n\n        char[\"strength\"]++;\n        char[\"dodge\"] += 2;\n        char[\"magicRegen\"] = 1;\n        char[\"magic\"]++;\n        spell = 'vicious mockery';\n        break;\n\n      case 'barbarian':\n        if (char.name == 'Conan') {\n          char[\"strength\"] += 3;\n        }\n\n        char[\"strength\"] += 2;\n        char[\"physicalResistance\"] += 5;\n        break;\n\n      case 'wizard':\n        char[\"magic\"] += 3;\n        char[\"magicRegen\"] = 1;\n\n        if (char.name == 'Gandolf') {\n          char[\"magicRegen\"]++;\n        }\n\n        spell = spellsService.findRandomLearnableSpell(char);\n        break;\n\n      case 'cleric':\n        if (char.name == 'Moraine') {\n          char[\"magicResistance\"] += 10;\n        }\n\n        char[\"magic\"]++;\n        char[\"hp\"] += 5;\n        char[\"magicRegen\"] = 1;\n        spell = 'light heal';\n        break;\n\n      case 'fighter':\n        if (char.name == 'Cloud') {\n          char[\"hp\"] += 15;\n        }\n\n        char[\"strength\"]++;\n        char[\"actions\"]++;\n        break;\n\n      case 'monk':\n        if (char.name == 'Lee') {\n          char[\"actions\"] += 2;\n        }\n\n        char[\"strength\"]++;\n        char[\"actions\"]++;\n        char[\"physicalResistance\"] += 10;\n        break;\n\n      case 'paladin':\n        if (char.name == 'Kaladin') {\n          char[\"thorns\"] += 3;\n        }\n\n        char[\"strength\"]++;\n        char[\"magicRegen\"] = 1;\n        char[\"magic\"]++;\n        spell = 'sacred flame';\n        break;\n\n      case 'warlock':\n        char[\"magic\"] += 3;\n\n        if (char.name == 'Grim') {\n          char[\"lifeSteal\"] += 10;\n        }\n\n        char[\"magicRegen\"] = 1;\n        spell = 'edritch blast';\n        break;\n\n      default:\n        char[\"classType\"] = 'unknown';\n        char[getRandomAbility()] += 3;\n        char[getRandomAbility()] += 3;\n        char[\"magicRegen\"] = char.magic > 0 ? 1 : 0;\n        spell = char.magic > 0 ? spellsService.findRandomLearnableSpell(char) : false;\n        break;\n    }\n\n    switch (char.race) {\n      case 'dragonborn':\n        char[\"strength\"] += 2; //TODO breath attack\n\n        break;\n\n      case 'human':\n        char[\"strength\"]++;\n        char[\"hp\"] += 5;\n        break;\n\n      case 'elf':\n        char[\"magic\"] > 0 ? char[\"magic\"]++ : char[\"dodge\"] += 1;\n        char[\"actions\"]++;\n        break;\n\n      case 'dwarf':\n        char[\"hp\"] += 5;\n        char[\"resistances\"] = [\"poison\"];\n        break;\n\n      case 'halfling':\n        char[\"luck\"] += 5;\n        break;\n\n      default:\n        char[\"race\"] = 'unknown';\n        char[getRandomAbility()] += 3;\n        char[getRandomAbility()] += 3;\n        spell = char.magic > 0 ? spellsService.findRandomLearnableSpell(char) : false;\n        break;\n    }\n\n    let newChar = new Character(char);\n\n    if (spell) {\n      spellsService.learnSpell(spell, newChar);\n    }\n\n    $store.state.player.characters.push(newChar);\n    gameService.addHealthPot();\n    gameService.getRaceClassSpecificItem(newChar);\n  }\n\n  deleteCharacter(characterId) {\n    $store.state.player.characters = $store.state.player.characters.filter(c => c.id !== characterId);\n  }\n\n}\n\nexport const characterService = new CharacterService();","map":{"version":3,"sources":["C:/Users/dhild/source/mini-projects/blades-of-desolation/src/services/CharacterService.js"],"names":["Character","$store","getRandomAbility","useToast","animationsService","gameService","monstersService","spellsService","setBonus","itemsService","CharacterService","getCharacterById","id","state","player","characters","find","c","takeTurn","prepPhase","attackPhase","combatMonsters","filter","m","hp","length","setTimer","removeDestroyedCharacters","resetActions","triggerStatusEffects","autoSelect","endPhase","clearInterval","timerInterval","timer","regen","magicRegen","selected","resetExtraStats","forEach","actions","baseActions","baseHp","magic","baseMagic","getAverageCharacterLvl","totalLvl","level","Math","floor","getPartyLuck","luck","commit","toast","error","name","inBattle","fadeOutUp","statusEffects","se","negative","value","effect","attemptToFlee","character","enemies","party","chance","fail","random","success","enterBattle","addItemStats","item","characterId","removeItemStats","addSetBonuses","setCounts","equipment","set","i","sets","push","getItemEffectsDisplay","removeSetBonuses","loadCharacter","index","char","createCharacter","spell","classType","findRandomLearnableSpell","race","newChar","learnSpell","addHealthPot","getRaceClassSpecificItem","deleteCharacter","characterService"],"mappings":"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","sourcesContent":["import { Character } from \"@/models/Character\"\r\nimport $store from '@/store/index.js'\r\nimport { getRandomAbility } from \"@/utils/getRandomAbility\"\r\nimport { useToast } from \"vue-toastification\"\r\nimport { animationsService } from \"./AnimationsService\"\r\nimport { gameService } from \"./GameService\"\r\nimport { monstersService } from \"./MonstersService\"\r\nimport { spellsService } from \"./SpellsService\"\r\nimport { setBonus } from \"@/utils/setBonus\"\r\nimport { itemsService } from \"./ItemsService\"\r\nclass CharacterService{\r\n  toast = useToast()\r\n\r\n  getCharacterById(id){\r\n    return $store.state.player.characters.find(c => c.id == id)\r\n  }\r\n  takeTurn(){\r\n    this.prepPhase()\r\n    this.attackPhase()\r\n  }\r\n  \r\n  prepPhase(){\r\n    if($store.state.combatMonsters.filter(m => m.hp > 0).length > 0){\r\n      gameService.setTimer()\r\n    }\r\n    this.removeDestroyedCharacters()\r\n    this.resetActions()\r\n    this.triggerStatusEffects()\r\n    this.autoSelect()\r\n  }\r\n  attackPhase(){\r\n    \r\n  }\r\n  endPhase(){\r\n    clearInterval($store.state.timerInterval)\r\n    $store.state.timer = 10000*$store.state.player.characters.length\r\n    this.regen()\r\n    this.magicRegen()\r\n    $store.state.selected = ''\r\n    this.resetExtraStats()\r\n    monstersService.takeTurn()\r\n  }\r\n  resetActions(){\r\n    $store.state.player.characters.forEach(c => {\r\n      c.actions = c.actions >= 0 ? c.baseActions : c.actions+c.baseActions\r\n    })\r\n  }\r\n  resetExtraStats(){\r\n    $store.state.player.characters.forEach(c => {\r\n      if(c.hp > c.baseHp){\r\n        c.hp = c.baseHp\r\n      }\r\n      if(c.magic > c.baseMagic){\r\n        c.magic = c.baseMagic\r\n      }\r\n    })\r\n  }\r\n  getAverageCharacterLvl(){\r\n    let totalLvl = 0\r\n    $store.state.player.characters.forEach(c => totalLvl += c.level)\r\n    if(totalLvl){\r\n      return Math.floor(totalLvl/$store.state.player.characters.length)\r\n    }\r\n    return totalLvl\r\n  }\r\n  getPartyLuck(){\r\n    let luck = 0\r\n    $store.state.player.characters.forEach(c => luck += c.luck)\r\n    return luck\r\n  }\r\n  removeDestroyedCharacters(){\r\n    $store.state.player.characters.forEach(c => {\r\n      if(c.hp < c.baseHp*-2){\r\n        $store.commit('destroyCharacter', c.id)\r\n        this.toast.error(c.name+' was destroyed')\r\n      }\r\n    })\r\n  }\r\n  autoSelect(){\r\n    if($store.state.selected?.hp > 0 && $store.state.selected?.actions > 0){\r\n      return\r\n    }\r\n    $store.state.player.characters.forEach(c => {\r\n      if(c.actions > 0 && c.hp > 0 && c.inBattle){\r\n        $store.state.selected = c\r\n        return\r\n      }\r\n    })\r\n  }\r\n  regen(){\r\n    $store.state.player.characters.forEach(c => {\r\n      if(c.regen > 0 ?? c.inBattle){\r\n        animationsService.fadeOutUp('hit'+c.id, c.regen, '+')\r\n        c.hp += c.regen\r\n      }\r\n    })\r\n  }\r\n  magicRegen(){\r\n    $store.state.player.characters.forEach(c => {\r\n      if(c.magicRegen > 0 ?? c.inBattle){\r\n        c.magic += c.magicRegen\r\n        c.magic = c.magic > c.baseMagic ? c.baseMagic : c.magic\r\n      }\r\n    })\r\n  }\r\n\r\n  triggerStatusEffects(){\r\n    $store.state.player.characters.forEach(c => {\r\n      c.statusEffects.forEach(se => {\r\n        if(!se.negative || typeof se.value !== 'number'){return}\r\n        c[se.effect] = se.value > 0 ? c[se.effect] - se.value : se.value\r\n        if(se.effect == 'hp'){\r\n          animationsService.fadeOutUp('hit'+c.id, se.value, '-', 'poison')\r\n        }\r\n      })\r\n    })\r\n  }\r\n  attemptToFlee(character){\r\n    let enemies = $store.state.combatMonsters.filter(m => m.hp > 0).length\r\n    let party = $store.state.player.characters.filter(c => c.inBattle).length\r\n    let chance = party == enemies ? .5 : party/enemies\r\n    chance += character.luck/100\r\n    let fail = Math.random()\r\n    if(chance > fail){\r\n      character.inBattle = false\r\n      this.toast.success(character.name+' got away')\r\n    }else{\r\n      this.toast.error('Failed to escape')\r\n    }\r\n  }\r\n  enterBattle(){\r\n    $store.state.player.characters.forEach(c => c.inBattle = true)\r\n  }\r\n  addItemStats(character, item){\r\n    $store.commit('equipItem', {characterId: character.id, item: item})\r\n  }\r\n  removeItemStats(character, item){\r\n    $store.commit('unequipItem', {characterId: character.id, item: item})\r\n  }\r\n  addSetBonuses(character){\r\n    let setCounts = {}\r\n    character.equipment.forEach(item => {\r\n      if(item.set){\r\n        setCounts[item.set] = setCounts[item.set] > 0 ? setCounts[item.set]+1 : 1\r\n      }\r\n    })\r\n    for(let set in setCounts){\r\n      if(setCounts[set] > 1){\r\n        for(let i=0; i < setCounts[set]-1; i++){\r\n          this.addItemStats(character, setBonus[set][i])\r\n          character.sets.push(itemsService.getItemEffectsDisplay(setBonus[set][i]))\r\n        }\r\n      }\r\n    }\r\n  }\r\n  removeSetBonuses(character){\r\n    let setCounts = {}\r\n    character.equipment.forEach(item => {\r\n      if(item.set){\r\n        setCounts[item.set] = setCounts[item.set] > 0 ? setCounts[item.set]+1 : 1\r\n      }\r\n    })\r\n    for(let set in setCounts){\r\n      if(setCounts[set] > 1){\r\n        character.sets = []\r\n        for(let i=0; i < setCounts[set]-1; i++){\r\n          this.removeItemStats(character, setBonus[set][i])\r\n        }\r\n      }\r\n    }\r\n  }\r\n  loadCharacter(index, char){\r\n    $store.state.player.characters[index] = new Character(char)\r\n  }\r\n  createCharacter(char){\r\n    let spell = false\r\n    switch(char.classType){\r\n      case 'rogue':\r\n        if(char.name == 'Royce'){\r\n          char[\"strength\"] += 2\r\n          char[\"hp\"] += 5\r\n        }\r\n        char[\"strength\"]++\r\n        char[\"actions\"]++\r\n        char[\"dodge\"] += 5\r\n        break\r\n      case 'ranger':\r\n        if(char.name == 'Aragorn'){\r\n          char[\"regen\"] = 2\r\n        }\r\n        char[\"strength\"]++\r\n        char[\"actions\"]++\r\n        char[\"hp\"] += 5\r\n        break\r\n      case 'bard':\r\n        if(char.name == 'Thom'){\r\n          char[\"luck\"] += 5\r\n        }\r\n        char[\"strength\"]++\r\n        char[\"dodge\"] += 2\r\n        char[\"magicRegen\"] = 1\r\n        char[\"magic\"]++\r\n        spell = 'vicious mockery'\r\n        break\r\n      case 'barbarian':\r\n        if(char.name == 'Conan'){\r\n          char[\"strength\"] += 3\r\n        }\r\n        char[\"strength\"] += 2\r\n        char[\"physicalResistance\"] += 5\r\n        break\r\n      case 'wizard':\r\n        char[\"magic\"] += 3\r\n        char[\"magicRegen\"] = 1\r\n        if(char.name == 'Gandolf'){\r\n          char[\"magicRegen\"]++\r\n        }\r\n        spell = spellsService.findRandomLearnableSpell(char)\r\n        break\r\n      case 'cleric':\r\n        if(char.name == 'Moraine'){\r\n          char[\"magicResistance\"] += 10\r\n        }\r\n        char[\"magic\"]++\r\n        char[\"hp\"] += 5\r\n        char[\"magicRegen\"] = 1\r\n        spell = 'light heal'\r\n        break\r\n      case 'fighter':\r\n        if(char.name == 'Cloud'){\r\n          char[\"hp\"] += 15\r\n        }\r\n        char[\"strength\"]++\r\n        char[\"actions\"]++\r\n        break\r\n      case 'monk':\r\n        if(char.name == 'Lee'){\r\n          char[\"actions\"] += 2\r\n        }\r\n        char[\"strength\"]++\r\n        char[\"actions\"]++\r\n        char[\"physicalResistance\"] += 10\r\n        break\r\n      case 'paladin':\r\n        if(char.name == 'Kaladin'){\r\n          char[\"thorns\"] += 3\r\n        }\r\n        char[\"strength\"]++\r\n        char[\"magicRegen\"] = 1\r\n        char[\"magic\"]++\r\n        spell = 'sacred flame'\r\n        break\r\n      case 'warlock':\r\n        char[\"magic\"] += 3\r\n        if(char.name == 'Grim'){\r\n          char[\"lifeSteal\"] += 10\r\n        }\r\n        char[\"magicRegen\"] = 1\r\n        spell = 'edritch blast'\r\n        break\r\n      default:\r\n        char[\"classType\"] = 'unknown'\r\n        char[getRandomAbility()] += 3\r\n        char[getRandomAbility()] += 3\r\n        char[\"magicRegen\"] = char.magic > 0 ? 1 : 0\r\n        spell = char.magic > 0 ? spellsService.findRandomLearnableSpell(char) : false\r\n        break\r\n    }\r\n    switch(char.race){\r\n      case 'dragonborn':\r\n        char[\"strength\"] += 2\r\n        //TODO breath attack\r\n        break\r\n      case 'human':\r\n        char[\"strength\"]++\r\n        char[\"hp\"] += 5\r\n        break\r\n      case 'elf':\r\n        char[\"magic\"] > 0 ? char[\"magic\"]++ : char[\"dodge\"] += 1\r\n        char[\"actions\"]++\r\n        break\r\n      case 'dwarf':\r\n        char[\"hp\"] += 5\r\n        char[\"resistances\"] = [\"poison\"]\r\n        break\r\n      case 'halfling':\r\n        char[\"luck\"] += 5\r\n        break\r\n      default:\r\n        char[\"race\"] = 'unknown'\r\n        char[getRandomAbility()] += 3\r\n        char[getRandomAbility()] += 3\r\n        spell = char.magic > 0 ? spellsService.findRandomLearnableSpell(char) : false\r\n        break\r\n    }\r\n    let newChar = new Character(char)\r\n    if(spell){\r\n      spellsService.learnSpell(spell, newChar)\r\n    }\r\n    $store.state.player.characters.push(newChar)\r\n    gameService.addHealthPot()\r\n    gameService.getRaceClassSpecificItem(newChar)\r\n  }\r\n  deleteCharacter(characterId){\r\n    $store.state.player.characters = $store.state.player.characters.filter(c => c.id !== characterId)\r\n  }\r\n}\r\nexport const characterService = new CharacterService()"]},"metadata":{},"sourceType":"module"}